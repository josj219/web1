/* 프로그램 저작권 정보
// 이 프로그램에 대한 저작권을 포함한 지적재산권은 (주)코비젼에 있으며,
// (주)코비젼이 명시적으로 허용하지 않은 사용, 복사, 변경, 제3자에의 공개, 배포는 엄격히 금지되며,
// (주)코비젼의 지적재산권 침해에 해당됩니다.
// (Copyright ⓒ 2011 Covision Co., Ltd. All Rights Reserved)
//
// You are strictly prohibited to copy, disclose, distribute, modify, or use  this program in part or
// as a whole without the prior written consent of Covision Co., Ltd. Covision Co., Ltd.,
// owns the intellectual property rights in and to this program.
// (Copyright ⓒ 2011 Covision Co., Ltd. All Rights Reserved)

///<creator>김형복</creator> 
///<createDate>2011.10.11</createDate> 
///<lastModifyDate>2011.10.11</lastModifyDate> 
///<version>1.1.0</version>
///<summary> 
///사이트에서 공통적으로 사용되는 유틸리티 스크립트 정의(Prefix "XFN_")
///</summary>
///<ModifySpc>
///여기에 변경내역을 변경일자(변경자) : 변경내용으로 기록합니다. 
///</ModifySpc>
*/


////////////////////////////////////////// onfocus 불필요시 ////////////////////////////////
function XFN_Bluring() {
    if (event.srcElement.tagName == "A" || event.srcElement.tagName == "IMG") document.body.focus();
}
document.onfocusin = XFN_Bluring;

////////////////////////////////////////// 레이어 팝업 Iframe에서 콜백 메써드 호출 ////////////////////////////////
// 팝업에서 부모 페이지의 콜백 함수를 호출합니다.
// <param name="pStrIFrameName">부모 창을 찾기 위한 IFrame ID</param>
// <param name="pStrCallBackMethodName">부모 창의 Call Back 함수 명</param>
// <param name="pStrValue">부모 창의 Call Back 함수에 넘겨줄 값</param>
function XFN_CallBackMethod_Call(pStrIFrameName, pStrCallBackMethodName, pStrValue) {
    if (pStrIFrameName == "") {
        if (opener != null) {
            eval("opener." + pStrCallBackMethodName + "('" + pStrValue + "')");
        } else { 
            eval("parent." + pStrCallBackMethodName + "('" + pStrValue + "')");
        }
    } else {
        var sCallBack = "";
        var sTemp = "";
        for (var i = 0; i < pStrIFrameName.split(";").length; i++) {
            sTemp = pStrIFrameName.split(";")[i];
            if (sTemp == "") {
                break;
            }

            if (i == 0) {
                if ($("#ifrTabContent_" + sTemp, parent.document)[0] == undefined)
                    sCallBack = "$('#" + sTemp + "_if', parent.document)[0].contentWindow";
                else
                    sCallBack = "$('#ifrTabContent_" + sTemp + "', parent.document)[0].contentWindow";
            } else {
                if ($("#ifrTabContent_" + sTemp)[0] == undefined)
                    sCallBack += "$('#" + sTemp + "_if')[0].contentWindow";
                else
                    sCallBack += "$('#ifrTabContent_" + sTemp + "')[0].contentWindow";
            }
            sCallBack += ".";
        }
        eval(sCallBack + pStrCallBackMethodName + "('" + pStrValue + "')");
    }
}

// iframe들간에 콜백 메써드 호출을 위한 메써드 저장 임시변수
// 사용방법 
//      1. 현재 팝업 레이어에서 콜백메써드를 정의하여 부모(자신을 띄운, 다른 레이어를 띄울)페이지의 아래 임시저장 메써드 중에 하나에 저장함.
//      2. 콜백 메써드를 파라메터로 전달하여 다른 레이어를 띄움.
//      2. 다른 레이어에서 부모 페이지에 저장된 메써드를 실행하여 우회적인 콜백 메써드 호출을 수행.
var g_XFNCallBackMethod, g_XFNCallBackMethod1, g_XFNCallBackMethod2, g_XFNCallBackMethod3, g_XFNCallBackMethod4, g_XFNCallBackMethod5;

////////////////////////////////////////// 슬라이드 바 컨트롤 생성 ////////////////////////////////
// <param name="pStrDivID">슬라이드바로 변경할 DIV ID</param>
// <param name="pStrCallBackMethodName">Call Back 함수 명</param>
// <param name="pintMin">슬라이드 컨트롤의 최소 값</param>
// <param name="pIntMax">슬라이드 컨트롤의 최대 값</param>
// <param name="pIntStep">슬라이드 컨트롤의 범위 값</param>
// <param name="pIntValue">최초 슬라이드에 표시할 값</param>
function XFN_SliderDateBar_Binding(pStrDivID, pStrCallBackMethodName, pintMin, pIntMax, pIntStep, pIntValue) {
    $("#" + pStrDivID).slider({
        range: "min",
        min: pintMin,
        max: pIntMax,
        value: pIntValue,
        change: function (event, ui) {
            var nTemp = Math.round(ui.value / pIntStep) * pIntStep;
            if ($("#" + pStrDivID).slider("value") != nTemp) {
                $("#" + pStrDivID).slider("value", nTemp);
            } else {
            try {
                if (pStrCallBackMethodName) {
                    eval(pStrCallBackMethodName + "(" + nTemp + ")");
                }
            } catch (e) { }
        }
        }
    });
}

////////////////////////////////////////// 날짜 제어 ////////////////////////////////
// 날짜를 문자열(yyyy.mm.dd)로 변경합니다.
// <param name="pObjDate">문자열(yyyy.mm.dd)로 변경할 날짜</param>
function XFN_getDateString(pObjDate, pFormat) {
    var sYear = pObjDate.getFullYear();
    var sMonth = XFN_AddFrontZero(pObjDate.getMonth() + 1, 2);
    var sDay = XFN_AddFrontZero(pObjDate.getDate(), 2);
    if (pFormat != undefined && pFormat != "") {
        return pFormat.replace("yyyy", sYear).replace("MM", sMonth).replace("dd", sDay);
    } else {
        return sYear + "." + sMonth + "." + sDay;
    }
}

// 문자열 Local Date Format을 서버 포멧으로 단순변환
function XFN_TransDateServerFormat(pLocalDate) {
    var l_strResult = "";
    var l_strServerDateFormat = "";
    var l_strLocalFormat = "";
    var l_strCheckDate = "";

    // 찌거기 제거
    pLocalDate = pLocalDate.trim();

    if (typeof _StandardDateFormat == "undefined") {
        l_strServerDateFormat = Common.GetBaseConfig("StandardDateFormat");
    } else {
        l_strServerDateFormat = _StandardDateFormat;
    }

    if (typeof _UR_DateFormat == "undefined") {
        l_strLocalFormat = Common.GetSession("UR_DateFormat");
    } else {
        l_strLocalFormat = _UR_DateFormat;
    }
    if (pLocalDate != "") {
        if (pLocalDate.length == 10) {
            l_strCheckDate = l_strServerDateFormat.replace("yyyy", pLocalDate.substr(l_strServerDateFormat.indexOf("yyyy"), 4)).replace("MM", pLocalDate.substr(l_strServerDateFormat.indexOf("MM"), 2)).replace("dd", pLocalDate.substr(l_strServerDateFormat.indexOf("dd"), 2));
            if (l_strCheckDate != pLocalDate) {
                l_strResult = l_strServerDateFormat.replace("yyyy", pLocalDate.substr(l_strLocalFormat.indexOf("yyyy"), 4)).replace("MM", pLocalDate.substr(l_strLocalFormat.indexOf("MM"), 2)).replace("dd", pLocalDate.substr(l_strLocalFormat.indexOf("dd"), 2));
            } else {
                l_strResult = l_strCheckDate;
            }
            l_strResult = l_strResult.substr(0, 10);
        } else if (pLocalDate.length > 10) {
            l_strResult = l_strServerDateFormat.replace("yyyy", pLocalDate.substr(l_strLocalFormat.indexOf("yyyy"), 4)).replace("MM", pLocalDate.substr(l_strLocalFormat.indexOf("MM"), 2)).replace("dd", pLocalDate.substr(l_strLocalFormat.indexOf("dd"), 2));
            l_strResult += pLocalDate.substr(10, pLocalDate.length - 10);
        } else {
            l_strResult = pLocalDate;
        }
    }

    return l_strResult;
}

// 문자열 Server Format을 Local Date Format으로 단순변환
function XFN_TransDateLocalFormat(pServerDate, pLocalFormat) {
    var l_strResult = "";
    var l_strServerDateFormat = "";
    var l_strCheckDate = "";
    pServerDate = pServerDate.trim();
    if (typeof _StandardDateFormat == "undefined") {
        l_strServerDateFormat = Common.GetBaseConfig("StandardDateFormat");
    } else {
        l_strServerDateFormat = _StandardDateFormat;
    }
    if (pLocalFormat == undefined || pLocalFormat == "") {
        if (typeof _UR_DateFormat == "undefined") {
            pLocalFormat = Common.GetSession("UR_DateFormat");
        } else {
            pLocalFormat = _UR_DateFormat;
        }
    }

    if (pServerDate != "") {
        if (pServerDate.length == 10) {
            l_strCheckDate = pLocalFormat.replace("yyyy", pServerDate.substr(pLocalFormat.indexOf("yyyy"), 4)).replace("MM", pServerDate.substr(pLocalFormat.indexOf("MM"), 2)).replace("dd", pServerDate.substr(pLocalFormat.indexOf("dd"), 2));
            if (l_strCheckDate != pServerDate) {
                l_strResult = pLocalFormat.replace("yyyy", pServerDate.substr(l_strServerDateFormat.indexOf("yyyy"), 4)).replace("MM", pServerDate.substr(l_strServerDateFormat.indexOf("MM"), 2)).replace("dd", pServerDate.substr(l_strServerDateFormat.indexOf("dd"), 2));
            } else {
                l_strResult = l_strCheckDate;
            }
            l_strResult = l_strResult.substr(0, 10);
        } else if (pServerDate.length > 10) {
            l_strResult = pLocalFormat.replace("yyyy", pServerDate.substr(l_strServerDateFormat.indexOf("yyyy"), 4)).replace("MM", pServerDate.substr(l_strServerDateFormat.indexOf("MM"), 2)).replace("dd", pServerDate.substr(l_strServerDateFormat.indexOf("dd"), 2));
            l_strResult += pServerDate.substr(10, pServerDate.length - 10);
        } else {
            l_strResult = pServerDate;
        }
    }

    return l_strResult;
}

// 날짜를 문자열(yyyy.mm.dd)로 변경합니다.
// y=연도(yyyy/yy)
// M=월(MM/M)
// d=일(dd/d)
// H=시(24시간)(HH/H)
// h=시(12시간)(hh/h)
// m=분(mm/m)
// <param name="pStrFormat">변경할 문자열(yyyy.mm.dd)</param>
// <param name="pObjDate">변경할 날짜</param>
function XFN_getDateTimeString(pStrFormat, pObjDate) {
    var sYear = pObjDate.getFullYear();
    var sMonth = XFN_AddFrontZero(pObjDate.getMonth() + 1, 2);
    var sDay = XFN_AddFrontZero(pObjDate.getDate(), 2);
    var sHours = XFN_AddFrontZero(pObjDate.getHours(), 2);
    var sHhours = sHours;
    var sMinute = XFN_AddFrontZero(pObjDate.getMinutes(), 2);
    var sSecond = XFN_AddFrontZero(pObjDate.getSeconds(), 2);
    if (sHhours > 12) {
        sHhours = XFN_AddFrontZero(sHhours - 12, 2);
    }
    return pStrFormat.replace("yyyy", sYear).replace("MM", sMonth).replace("dd", sDay).replace("HH", sHours).replace("hh", sHhours).replace("mm", sMinute).replace("ss", sSecond);
}

// 날짜를 문자열(hh:mm:ss)로 변경합니다.
// <param name="pObjDate">문자열(hh:mm:ss)로 변경할 날짜</param>
function XFN_getTimeString(pObjDate) {
    return sHours + ":" + sMinute + ":" + sSecond;
}

//오늘날짜 구하기
function XFN_getCurrDate(pSplitStr, pFormat) {  //pSplitStr: 년월일사이에 나타낼 구분문자
    var now = new Date();
    var year = now.getFullYear();
    var month = now.getMonth() + 1;
    var date = now.getDate();
    if (month < 10)  //월이 한자리수인 경우
        month = "0" + month;
    if (date < 10)   //일이 한자리수인 경우
        date = "0" + date;

    var currDate = "";
    if (pFormat == undefined) {
        currDate = year + pSplitStr + month + pSplitStr + date;   //예: 2009-10-02
    } else {
        if (pFormat == 'dot' || pFormat == 'dash' || pFormat == 'slash' || pFormat == 'enslash') {
            currDate = year + pSplitStr + month + pSplitStr + date;   //예: 2009-10-02
        } else {
            currDate = pFormat.replace("yyyy", year).replace("MM", month).replace("dd", date);
        }
    }
    return currDate;
}


//현재날짜에 일수 더하기 빼기
function XFN_addMinusDateByCurrDate(pCaculDays, pSplitStr, pFormat) {  //pCaculDays:더하거나 뺄 일수 , pSplitStr: 년월일사이에 나타낼 구분문자
    var date = new Date();
    var sDate;
    sDate = date.getDate() + pCaculDays * 1; //현재날짜에 더해(빼)줄 날짜를 계산
    date.setDate(sDate); //계산된 날짜로 다시 세팅

    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var date = date.getDate();

    if (month < 10)  //월이 한자리수인 경우
        month = "0" + month;
    if (date < 10)   //일이 한자리수인 경우
        date = "0" + date;

    var resultDate = "";   //예: 2009-10-02
    if (pFormat == undefined) {
        resultDate = year + pSplitStr + month + pSplitStr + date;   //예: 2009-10-02
    } else {
        if (pFormat == 'dot' || pFormat == 'dash' || pFormat == 'slash' || pFormat == 'enslash') {
            resultDate = year + pSplitStr + month + pSplitStr + date;   //예: 2009-10-02
        } else {
            resultDate = pFormat.replace("yyyy", year).replace("MM", month).replace("dd", date);
        }
    }

    return resultDate;
}

//특정날짜에 일수 더하기 빼기
function XFN_addMinusDateBySomeDate(pYear, pMonth, pDay, pCaculDays, pSplitStr, pFormat) {  //pYear, pMonth, pDay (특정날짜 년,월,일)
    var date = new Date(pYear, pMonth-1, pDay);
    var sDate;
    sDate = date.getDate() + pCaculDays * 1; //특정날짜에 더해(빼)줄 날짜를 계산
    date.setDate(sDate); //계산된 날짜로 다시 세팅

    var year = date.getFullYear();
    var month = date.getMonth()+1;
    var date = date.getDate();

    if (month < 10)  //월이 한자리수인 경우
        month = "0" + month;
    if (date < 10)   //일이 한자리수인 경우
        date = "0" + date;

    var resultDate = "";   //예: 2009-10-02
    if (pFormat == undefined) {
        resultDate = year + pSplitStr + month + pSplitStr + date;   //예: 2009-10-02
    } else {
        if (pFormat == 'dot' || pFormat == 'dash' || pFormat == 'slash' || pFormat == 'enslash') {
            resultDate = year + pSplitStr + month + pSplitStr + date;   //예: 2009-10-02
        } else {
            resultDate = pFormat.replace("yyyy", year).replace("MM", month).replace("dd", date);
        }
    }

    return resultDate;
}

// javascript DelayTime 주기
function XFN_ScriptDelayTime(pMSeconds) {
    var then, now;
    then = new Date().getTime();
    now = then;
    while ((now - then) < pMSeconds) {
        now = new Date().getTime();
    }
}

function XFN_dateAdd(sDate, v, t, pSplitStr, pFormat) {
    pSplitStr = pSplitStr || "-";
    var year = "";
    var month = "";
    var date = "";
    var d;
    if (typeof (sDate) == "object") {
        year = sDate.getFullYear();
        month = sDate.getMonth() + 1; month = (month < 10) ? '0' + month : month;
        date = sDate.getDate(); date = (date < 10) ? '0' + date : date;
    } else {
        year = parseInt(sDate.substr(0, 4), 10);
        month = parseInt(sDate.substr(5, 2), 10);
        date = parseInt(sDate.substr(8), 10);
    }

    if (t == "d" || t == "D") {
        d = new Date(year, month - 1, date + v);
    } else if (t == "w" || t == "W") {
        d = new Date(year, month - 1, date + (v * 7));
    } else if (t == "m" || t == "M") {
        d = new Date(year, month - 1 + v, date);
    } else if (t == "y" || t == "Y") {
        d = new Date(year + v, month - 1, date);
    } else {
        d = new Date(year, month - 1, date + v);
    }


    year = d.getFullYear();
    month = d.getMonth() + 1; month = (month < 10) ? '0' + month : month;
    date = d.getDate(); date = (date < 10) ? '0' + date : date;

    //return '' + year + '-' + month + '-' + date;

    var resultDate = "";   //예: 2009-10-02
    if (pFormat == undefined) {
        resultDate = year + pSplitStr + month + pSplitStr + date;   //예: 2009-10-02
    } else {
        if (pFormat == 'dot' || pFormat == 'dash' || pFormat == 'slash' || pFormat == 'enslash') {
            resultDate = year + pSplitStr + month + pSplitStr + date;   //예: 2009-10-02
        } else {
            resultDate = pFormat.replace("yyyy", year).replace("MM", month).replace("dd", date);
        }
    }

    return resultDate;
}

////////////////////////////////////////// 문자열 관련 제어 ////////////////////////////////
// 입력값 앞에 '0'을 붙여서 입력받는 자리수의 문자열을 반환한다.
function XFN_AddFrontZero(inValue, digits) {
    var result = "";
    inValue = inValue.toString();

    if (inValue.length < digits) {
        for (i = 0; i < digits - inValue.length; i++)
            result += "0";
    }
    result += inValue
    return result;
}

// 입력된 값에 HTML 테그 또는 스크립트가 들어 있는지 검사
function XFN_ValidationCheckXSS() {
    // XSS 클래스 미지정시 : HTML 자체 입력불가
    // NoScriptXSS : 스크립트, style만 불가(HTML 테그는 입력 가능)
    // NoCheckXSS : XSS 체크를 하지않음(Html로 노출되지 않거나 cs단에서 처리함.)
    var l_HtmlCheckValue = false;
    var l_ScriptCheckValue = false;
    var l_oTarget;

    // XSS 관련 CSS를 지정하지않는 모든 input, TextArea는 XSS 체크 대상임.
    $("input").each(function () {
        if ($(this).hasClass("NoScriptXSS") || $(this).hasClass("NoCheckXSS")) {
        } else if (XFN_CheckHTMLinText($(this).val())) {
            l_HtmlCheckValue = true;
            l_oTarget = $(this);
        }
    });
    if (!l_HtmlCheckValue) {
        $("textarea").each(function () {
            if ($(this).hasClass("NoScriptXSS") || $(this).hasClass("NoCheckXSS")) {
            } else if (XFN_CheckHTMLinText($(this).val())) {
                l_HtmlCheckValue = true;
                l_oTarget = $(this);
            }
        });
    }
    if (!l_HtmlCheckValue) {
        // 스크립트 입력 불가 Input, TextArea Check
        $("input").each(function () {
            if ($(this).hasClass("NoScriptXSS") && XFN_CheckInputLimit($(this).val())) {
                $(this).focus();
                l_ScriptCheckValue = true;
                l_oTarget = $(this);
            }
        });
        if (!l_ScriptCheckValue) {
            $("textarea").each(function () {
                if ($(this).hasClass("NoScriptXSS") && XFN_CheckInputLimit($(this).val())) {
                    $(this).focus();
                    l_ScriptCheckValue = true;
                    l_oTarget = $(this);
                }
            });
        }
    }
    // 메시지 반환
    if (l_ScriptCheckValue || l_HtmlCheckValue) {
        var l_WarningMsg = "";
        // 히든 필드에 입력 불가 값 존재로 Focus 넘길 수 없음
        if ($(l_oTarget).attr("type") == "hidden" || $(l_oTarget).css("display") == "none") { 
            if (l_ScriptCheckValue) { // 스크립트 입력불가
                l_WarningMsg = Common.GetDic("msg_ThisPageLimitedScript");
            } else {  // HTML 테그 입력 불가
                l_WarningMsg = Common.GetDic("msg_ThisPageLimitedHTMLTag");
            }
            if (CFN_GetQueryString("CFN_OpenLayerName") == "undefined") {
                Common.Warning(l_WarningMsg, "Warning[" + $(l_oTarget).attr("id") + "]");
            } else {
                parent.Common.Warning(l_WarningMsg, "Warning[" + $(l_oTarget).attr("id") + "]");
            }
            return false;
        } else { 
            if (l_ScriptCheckValue) { // 스크립트 입력불가
                l_WarningMsg = Common.GetDic("msg_ThisInputLimitedScript");
            } else {  // HTML 테그 입력 불가
                l_WarningMsg = Common.GetDic("msg_ThisInputLimitedHTMLTag");
            }

            if (CFN_GetQueryString("CFN_OpenLayerName") == "undefined") {
                Common.Warning(l_WarningMsg, "Warning[" + $(l_oTarget).attr("id") + "]", function () { $(l_oTarget).focus(); });
            } else {
                parent.Common.Warning(l_WarningMsg, "Warning[" + $(l_oTarget).attr("id") + "]", function () { $(l_oTarget).focus(); });
            }
            return false;
        }
    } else {
        return true;
    }
}

// 입력필드에 XSS체크가 있는 것만 체크
function XFN_ValidationCheckOnlyXSS() {
    // XSS 클래스 미지정시 : HTML 스크립트 입력 가능
    // HtmlCheckXSS : HTML 입력 불가
    // ScriptCheckXSS : 스크립트만 입력 불가
    var l_HtmlCheckValue = false;
    var l_ScriptCheckValue = false;
    var l_oTarget;

    // Html 자체 입력을 제한
    $(".HtmlCheckXSS").each(function () {
        if (!l_HtmlCheckValue) {
            if (XFN_CheckHTMLinText($(this).val())) {
                l_HtmlCheckValue = true;
                l_oTarget = $(this);
            }
        }
    });
    // 스크립트만 입력 불가
    if (!l_HtmlCheckValue) {
        $(".ScriptCheckXSS").each(function () {
            if (!l_ScriptCheckValue) {
                if (XFN_CheckInputLimit($(this).val())) {
                    l_ScriptCheckValue = true;
                    l_oTarget = $(this);
                }
            }
        });
    }
    
    // 메시지 반환
    if (l_ScriptCheckValue || l_HtmlCheckValue) {
        var l_WarningMsg = "";
        // 히든 필드에 입력 불가 값 존재로 Focus 넘길 수 없음
        if ($(l_oTarget).attr("type") == "hidden" || $(l_oTarget).css("display") == "none") {
            if (l_ScriptCheckValue) { // 스크립트 입력불가
                l_WarningMsg = Common.GetDic("msg_ThisPageLimitedScript");
            } else {  // HTML 테그 입력 불가
                l_WarningMsg = Common.GetDic("msg_ThisPageLimitedHTMLTag");
            }
            if (CFN_GetQueryString("CFN_OpenLayerName") == "undefined") {
                Common.Warning(l_WarningMsg, "Warning[" + $(l_oTarget).attr("id") + "]");
            } else {
                parent.Common.Warning(l_WarningMsg, "Warning[" + $(l_oTarget).attr("id") + "]");
            }
            return false;
        } else {
            if (l_ScriptCheckValue) { // 스크립트 입력불가
                l_WarningMsg = Common.GetDic("msg_ThisInputLimitedScript");
            } else {  // HTML 테그 입력 불가
                l_WarningMsg = Common.GetDic("msg_ThisInputLimitedHTMLTag");
            }

            if (CFN_GetQueryString("CFN_OpenLayerName") == "undefined") {
                Common.Warning(l_WarningMsg, "Warning[" + $(l_oTarget).attr("id") + "]", function () { $(l_oTarget).focus(); });
            } else {
                parent.Common.Warning(l_WarningMsg, "Warning[" + $(l_oTarget).attr("id") + "]", function () { $(l_oTarget).focus(); });
            }
            return false;
        }
    } else {
        return true;
    }
}

//html 태그 및 스크립트 방지
function XFN_CheckHTMLinText(pValue) {
    var newPValue = pValue.replace(/<[^<가-힣]+?>/gi, '');
    if (pValue != newPValue) {
        //pValue = newPValue;
        return true;
    }
    else {
        return false;
    }
}

//받은 입력값 특수문자 변환 처리1
function XFN_ChangeInputValue(pValue) {
    var strReturenValue = "";
    strReturenValue = pValue.replace(/&/gi, '&amp;').replace(/</gi, '&lt;').replace(/>/gi, '&gt;').replace(/"/gi, '&quot;').replace(/'/gi, '&apos;').replace(/[\x0B]/g, '');
    return strReturenValue;
}

//받은 입력값 특수문자 변환 처리2
function XFN_ChangeOutputValue(pValue) {
    var strReturenValue = "";
    strReturenValue = pValue.replace(/&amp;/gi, '&').replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&quot;/gi, '"').replace(/&apos;/gi, '\'').replace(/&nbsp;/gi, ' ');
    return strReturenValue;
}

// 문자열 중에 스크립트가 있는지 체크하는 함수 ex) "<script>aa </script>" 있는지 체크함.
function XFN_CheckInputLimit(pValue) {
    var rx =/<\s*script.+?<\/\s*script\s*>/gi;
    if (pValue.match(rx)) {
        return true;
    } else {
        rx = /<\s*style.+?<\/\s*style\s*>/gi;
        if (pValue.match(rx)) {
            return true;
        } else {
            return false;
        }
    }
}


event_noop = function () { return (false); }
var m_xmlHTTP = CreateXmlHttpRequest();
requestHTTP = function (sMethod, sUrl, bAsync, sCType, pCallback, vFileName) {
    m_xmlHTTP.open(sMethod, sUrl, bAsync);
    m_xmlHTTP.setRequestHeader("Accept-Language", "ko");
    m_xmlHTTP.setRequestHeader("Content-type", sCType);
    if (pCallback != null) m_xmlHTTP.onreadystatechange = pCallback;
    (vFileName != null) ? m_xmlHTTP.send(vFileName) : m_xmlHTTP.send();
}

// 문자열 변환
function toUTF8(szInput) {
    var wch, x, uch = "", szRet = "";
    for (x = 0; x < szInput.length; x++) {
        wch = szInput.charCodeAt(x);
        if (!(wch & 0xFF80)) {
            szRet += "%" + wch.toString(16);
        }
        else if (!(wch & 0xF000)) {
            uch = "%" + (wch >> 6 | 0xC0).toString(16) +
                    "%" + (wch & 0x3F | 0x80).toString(16);
            szRet += uch;
        }
        else {
            uch = "%" + (wch >> 12 | 0xE0).toString(16) +
                    "%" + (((wch >> 6) & 0x3F) | 0x80).toString(16) +
                    "%" + (wch & 0x3F | 0x80).toString(16);
            szRet += uch;
        }
    }
    return (szRet);
}

// JQuery selector value escaping (http://stackoverflow.com/questions/739695/jquery-selector-value-escaping)
function XFN_EscapeJQueryString(str) {
    if (str) {
        return str.replace(/([ #;?%&,.+*~\':"!^$[\]()=>|\/@])/g, '\\$1')
    } else {
        return str;
    }
}

//받은 문자열 모든 키보드 특수기호 제거 후 반환
function XFN_ReplaceAllSpecialChars(pValue) {
	//정규식으로 제거 
	var specialChars = /[~@!#$^%&*=+|:;?"<,.>'`(){}-]/;
	pValue = pValue.split(specialChars).join("");
	//정규식으로 제거 안되는 기호들 제거
	pValue = pValue.split('/').join("").split('_').join("").split('[').join("").split(']').join("").split('\\').join("");
	return pValue;
}

//문자열내의 특정문자들을 모두 replace 해주는 함수
//문자열, 원래문자, 바뀔문자
function XFN_ReplaceAllChars(entry, orginVal, newVal) {  
    temp = "" + entry;
    while (temp.indexOf(orginVal) > -1) {
        pos = temp.indexOf(orginVal);
        temp = "" + (temp.substring(0, pos) + newVal +
		temp.substring((pos + orginVal.length), temp.length));
    }
    return temp;
}

//문자열, 원래문자, 바뀔문자
function XFN_ReplaceAllRegExp(pSource, pOriginVal, pNewVal) {
    var rx = new RegExp("(^|\\s)" + pOriginVal + "(\\s|$)");
    return pSource.replace(rx, pNewVal);
}

//본문 스타일에 의해서 다른영역에 스타일을 영향을 받지 않토록 처리
function XFN_RemoveEditorContentStyle(pContents) {
    var iBodyStart = pContents.toLowerCase().indexOf("<body");
    var iBodyEnd = pContents.toLowerCase().indexOf("</body>");
    if (iBodyStart > -1)
    {
        pContents = pContents.replace(pContents.substr(iBodyStart, 5), "<span");
    }
    if (iBodyEnd > -1)
    {
        pContents = pContents.replace(pContents.substr(iBodyEnd, 7), "</span>");
    }

    pContents = pContents.replace("/Common/ExControls/TagFree/tagfree.css", "");

    return pContents;
}
// Covi 그리드뷰를 Excel로 방식으로 변환(HTML을 수정하여 Excel로 내보낼때 스타일이 깨지지 않도록 처리)
function XFN_ConvertGridToExcelHTML(pContainerDivId) {
    // Table에 보더 주기
    $("#" + pContainerDivId).find("table").each(function () {
        $(this).attr("border", "1");
    })
    // 해더에 컬러 넣기
    $("#" + pContainerDivId).find("th").each(function () {
        $(this).css("background-color", "#B9DADB");
    })
    // 해더 이미지 제거
    $("#" + pContainerDivId).find("img").each(function () {
        if ($(this).attr("src") == "/Images/Images/board/table_th_line.gif") { $(this).parent().remove(); }
    })
    // 빈 Td 제거
    $("#" + pContainerDivId).find("td").each(function () {
        if ($(this).html() == "&nbsp;") { $(this).remove(); }
    })
    // 이미지 테그 제거
    $("#" + pContainerDivId).find("img").each(function () {
        $(this).remove();
    })
    // 링크 제거
    $("#" + pContainerDivId).find("a").each(function () {
        $(this).parent().html($(this).html());
    })
}

// 소트키 증가/감소 메써드 + - 
function XFN_PlusSortKey(pType, pCtlId) {
    if (pType == "+") {
        $("#" + pCtlId).val(parseInt($("#" + pCtlId).val(), 10) + 1);
    } else {
        $("#" + pCtlId).val(parseInt($("#" + pCtlId).val(), 10) - 1);
    }
}

////////////////////////////////////////// 이미지 사이즈 제어 ////////////////////////////////
// 이미지 사이즈를 비율에 맞게 조절해 줌.
function XFN_ImageReSize(pObjImage, pIntMaxWidth, pIntMaxHeight) {
    if (pIntMaxWidth < $(pObjImage).width()) {
        $(pObjImage).css("height", "");
        $(pObjImage).width(pIntMaxWidth);
        if (pIntMaxHeight < $(pObjImage).height()) {
            $(pObjImage).css("width", "");
            $(pObjImage).height(pIntMaxHeight);
        }
    } else if (pIntMaxHeight < $(pObjImage).height()) {
        $(pObjImage).css("width", "");
        $(pObjImage).height(pIntMaxHeight);
        if (pIntMaxWidth < $(pObjImage).width()) {
            $(pObjImage).css("height", "");
            $(pObjImage).width(pIntMaxWidth);
        }
    }
}

//이미지 이름으로 사이즈 조정(비율로 조정)
function XFN_ResizeImageOfName(pImgNm, pLimitWidth, pLimitHeight) {
    $("[name=" + pImgNm + "]").each(function () {
        XFN_ImageReSize($(this), pLimitWidth, pLimitHeight)
    });
}

//파일 아이콘 구하기
function XFN_GetFileIcon(pExt, pType) {
    if (pType == undefined || pType == "") {pType = 0; }
    var sFileNm = "";
    switch (pExt.toLowerCase()) { // Web.Config에 SupportAttachExtImg과 일치시키면 됨.
        case "doc":
            sFileNm = "data_doc.gif"; break;
        case "docx":
            sFileNm = "data_docx.gif"; break;
        case "ppt":
            sFileNm = "data_ppt.gif"; break;
        case "pptx":
            sFileNm = "data_pptx.gif"; break;
        case "xls":
            sFileNm = "data_xls.gif"; break;
        case "xlsx":
            sFileNm = "data_xlsx.gif"; break;
        case "hwp":
            sFileNm = "data_hwp.gif"; break;
        case "hwt":
            sFileNm = "data_hwp.gif"; break;
        case "gul":
            sFileNm = "data_gul.gif"; break;
        case "pdf":
            sFileNm = "data_pdf.gif"; break;
        case "txt":
            sFileNm = "data_txt.gif"; break;
        case "zip":
            sFileNm = "data_zip.gif"; break;
        case "rar":
            sFileNm = "data_zip.gif"; break;
        case "asf":
            sFileNm = "data_asf.gif"; break;
        case "avi":
            sFileNm = "data_avi.gif"; break;
        case "wmv":
            sFileNm = "data_wmv.gif"; break;
        case "mpeg":
            sFileNm = "data_mpeg.gif"; break;
        case "swf":
            sFileNm = "data_swf.gif"; break;
        case "mp4":
            sFileNm = "data_mp4.gif"; break;
        case "mp3":
            sFileNm = "data_mp3.gif"; break;
        case "bmp":
            sFileNm = "data_img.gif"; break;
        case "gif":
            sFileNm = "data_img.gif"; break;
        case "jpg":
            sFileNm = "data_img.gif"; break;
        case "png":
            sFileNm = "data_img.gif"; break;
        case "htm":
            sFileNm = "data_htm.gif"; break;
        case "html":
            sFileNm = "data_htm.gif"; break;
        case "mpp":
            sFileNm = "data_mpp.gif"; break;
        default:
            sFileNm = "data_disk.gif"; break;
    }

    if (pType == 1) {
        return "<img src='/Images/images/Controls/file/" + sFileNm + "'/>";
    }
    else {
        return "/Images/images/Controls/file/" + sFileNm + "";
    }
}

// file size 변경 (byte -> KByte 3자리 콤마)
function XFN_ConvertFileSize(byte) {
    return byte = CFN_AddComma((byte / 1024).toFixed(2));
}


////////////////////////////////////////// 미디어 플레이 관련 ////////////////////////////////
/******************************************************************
이 소스가 들어가는 JS파일은 반드시 src로 외부에서 호출되어야함.
******************************************************************/
function XFN_FlashPlay(pPath, pWidth, pHeight) {
    var l_Object = '';
    l_Object += '<object type="application/x-shockwave-flash" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,0,0" id="param" width="' + pWidth + '" height="' + pHeight + '">';
    l_Object += '<param name="movie" value="' + pPath + '">';
    l_Object += '<param name="quality" value="high">';
    l_Object += '<param name="bgcolor" value="#ffffff">';
    l_Object += '<param name="menu" value="false">';
    l_Object += '<param name="swliveconnect" value="true">';
    l_Object += '<embed src="' + pPath + '" quality=high bgcolor="#ffffff" menu="false" width="' + pWidth + '" height="' + pHeight + '" swliveconnect="true" id="param" name="param" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"><\/embed>';
    l_Object += '<\/object>';
    document.write(l_Object);
}



function DoCallback(url, param) {

    var pageUrl = url + "?" + param;
    var xmlRequest = CreateXmlHttpRequest();  //크로스브라우징 방식

    xmlRequest.open("POST", pageUrl, false);
    xmlRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xmlRequest.send(null);

    return xmlRequest;

}

function DoCallback2(sUrl, param, pCallback, vBody) {
    var pageUrl = sUrl + "?" + param;

    //var m_xmlHTTP = new ActiveXObject("MSXML2.XMLHTTP");
    var m_xmlHTTP = CreateXmlHttpRequest();

    m_xmlHTTP.open("POST", pageUrl, false);
    m_xmlHTTP.setRequestHeader("Content-type", "text/xml");  //text/xml형식

    if (pCallback != null)
        m_xmlHTTP.onreadystatechange = pCallback;

    (vBody != null) ? m_xmlHTTP.send(vBody) : m_xmlHTTP.send();  //vBody

    return m_xmlHTTP;
}

//XML유효성 체크
function evalXML2(sXML) {
    //var m_evalXML = new ActiveXObject("MSXML2.DOMDocument");  //기존방식
    var m_evalXML = CreateXmlDocument();  //크로스브라우징 처리

    if (!m_evalXML.loadXML(sXML)) {
        var err = m_evalXML.parseError;
        throw new Error(err.errorCode, "desc:" + err.reason + "\nsrctxt:" + err.srcText + "\nline:" + err.line + "\tcolumn:" + err.linepos);
    }
}

function SelectSingleNode(xmlDoc, elementPath) {
    if (window.ActiveXObject !== undefined) {
        if (elementPath == "response/error") {
            return null;
        } else {
            return xmlDoc.selectSingleNode(elementPath).text;
        }
    }
    else {
        var xpe = new XPathEvaluator();
        var nsResolver = xpe.createNSResolver(xmlDoc.ownerDocument == null ? xmlDoc.documentElement : xmlDoc.ownerDocument.documentElement);
        var results = xpe.evaluate(elementPath, xmlDoc, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);

        if (elementPath == "response/error") {
            return null;
        } else {
            return results.singleNodeValue.textContent;
        }
    }
}

var win;
function openWindow(fileName, windowName, theWidth, theHeight, etcParam) {

    var x = theWidth;
    var y = theHeight;

    var sy = window.screen.height / 2 - y / 2 - 70;
    if (etcParam == 'fix') {
        etcParam = "toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0";
        var sy = window.screen.height / 2 - y / 2 - 40;
    }
    else if (etcParam == 'resize') {
        etcParam = "toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=1";
        var sy = window.screen.height / 2 - y / 2 - 40;
    }

    var sx = window.screen.width / 2 - x / 2;


    if (sy < 0) {
        sy = 0;
    }

    var sz = ",top=" + sy + ",left=" + sx;

    if (windowName == null || windowName == "" || windowName == "newMessageWindow") {
        windowName = new String(Math.round(Math.random() * 100000));
    }

    if (windowName == "FORMS") {
        win = window.open(fileName, windowName, etcParam + ",width=" + x + ",height=" + y + sz);
    } else {
        window.open(fileName, windowName, etcParam + ",width=" + x + ",height=" + y + sz);
    }
}

////////////////////////////////////////// SSG 추가 ////////////////////////////////
if (typeof ($) == "undefined") $ = JQuery;
// js파일 추가 2016-05-20 by cjh
function XFN_IncludeJS(filename) {
    
    if ($("script[src='" + filename + "']").length === 0) {
        var $node = $('<script>').attr({ src: filename, type: "text/javascript" });
        $(document.body).append($node);
    }
}

// URL 파라미터값 조회 (대소문자 구분) 2016-05-25 by cjh
function XFN_GetParameterByName(pParam, pUrl) {
    if (!pUrl) pUrl = window.location.search.substring(1);
    else {
        pUrl = pUrl.indexOf('?') > -1 ? pUrl.split('?')[1] : pUrl;
    }
    var sURLVariables = pUrl.split('&'), sParameterName, i;
    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0].toLowerCase() === pParam.toLowerCase()) {
            return sParameterName[1] === undefined ? "" : decodeURIComponent(sParameterName[1]);
        }
    }
}

// String.foramt 2016-05-27 by cjh
$.format = function (str, col) {
    col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 1);

    return str.replace(/\{\{|\}\}|\{(\w+)\}/g, function (m, n) {
        if (m == "{{") { return "{"; }
        if (m == "}}") { return "}"; }
        return col[n];
    });
};

// Ajax file download - form submit 방식 2016-05-30 by cjh
$.download = function (url, data, method) {
    //url and data options required
    if (url && data) {
        //data can be string of parameters or array/object
        data = typeof data == 'string' ? data : jQuery.param(data);
        //split params into form inputs
        var inputs = '';
        jQuery.each(data.split('&'), function () {
            var pair = this.split('=');
            inputs += '<input type="hidden" name="' + pair[0] + '" value="' + pair[1] + '" />';
        });
        //send request
        jQuery('<form action="' + url + '" method="' + (method || 'post') + '">' + inputs + '</form>')
        .appendTo('body').submit().remove();
    };
};


function XFN_GetQueryString(pParamName,pQueryString){
    if(pQueryString == undefined){
        return CFN_GetQueryString(pParamName);
    } else {
        var _QureyObject = {};
        var queryString = "";
        if (pQueryString.indexOf('?') > -1) {
            pQueryString = pQueryString.split('?')[1];
        }
        queryString = pQueryString.split('&');
        for (var i = 0; i < queryString.length; i++) {
            var name = queryString[i].split('=')[0];
            var value = queryString[i].split('=')[1];
            _QureyObject[name] = value;
        }
        if (_QureyObject[pParamName] == "undefined" || _QureyObject[pParamName] == null) {
            return "undefined";
        } else {
            try {
                return _QureyObject[pParamName];
            } finally {
                _QureyObject = null;
            }
        }
    }
}