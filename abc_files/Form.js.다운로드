// 변수 정리 시작 

/** formmenu.js 용 리소스 파일 변수 Start  **/
function setGlobalVar() {
    //아래 함수에서 전역 변수 선언
    gLabel__close2 = formJson.oLang.lbl_apv_close2;
    gLabel__writer = formJson.oLang.lbl_apv_writer;
    gLabel__ChargeDept_Rec = formJson.oLang.lbl_apv_ChargeDept_Rec;
    gLabel__open = formJson.oLang.lbl_apv_open;
    gLabel__Charger = formJson.oLang.lbl_apv_Charger;
    gLabel__changeapprover = formJson.oLang.lbl_apv_changeapprover;
    gLabel__draft = formJson.oLang.lbl_apv_Draft;
    gLabel__redraft = formJson.oLang.lbl_apv_redraft;
    gLabel__app = formJson.oLang.lbl_apv_app;
    gLabel__Trans1 = formJson.oLang.lbl_apv_Trans1;
    gLabel__Trans2 = formJson.oLang.lbl_apv_Trans2;
    gLabel__jic = formJson.oLang.lbl_apv_jic;
    gLabel__composing = formJson.oLang.lbl_apv_composing;
    gLabel__Doc_back = formJson.oLang.lbl_apv_Doc_back;
    gLabel__Doc_cancel = formJson.oLang.lbl_apv_Doc_cancel;
    gLabel__Approve_cancel = formJson.oLang.lbl_apv_Approve_cancel;
    gLabel__Doc_OK = formJson.oLang.lbl_apv_Doc_OK;
    gLabel__recieve_apv = formJson.oLang.lbl_apv_recieve_apv;
    gLabel__receive = formJson.oLang.lbl_apv_receive;
    gLabel__inactive = formJson.oLang.lbl_apv_inactive;
    gLabel__ChargeDept = formJson.oLang.lbl_apv_ChargeDept;
    gLabel__circulation_sent = formJson.oLang.lbl_apv_circulation_sent;
    gLabel__personalSave = formJson.oLang.lbl_apv_personalSave;
    gLabel__recinfo_td2 = formJson.oLang.lbl_apv_recinfo_td2;
    gLabel_inactive = formJson.oLang.lbl_apv_inactive;
    gLabel_apvlinecomment = formJson.oLang.lbl_apv_apvlinecomment_01;
    gLabel_circulationviewcomment = formJson.oLang.lbl_apv_circulationviewcomment_01;
    /** formmenu.js 용 리소스 파일 변수 End **/

    gMessage28 = formJson.oLang.msg_apv_028;
    gMessage29 = formJson.oLang.msg_apv_029;
    gMessage54 = formJson.oLang.msg_apv_054;
    gMessage55 = formJson.oLang.msg_apv_055;
    gMessage57 = formJson.oLang.msg_apv_057;
    gMessage67 = formJson.oLang.msg_apv_067;
    gMessage70 = formJson.oLang.msg_apv_070;
    gMessage71 = formJson.oLang.msg_apv_071;
    gMessage72 = formJson.oLang.msg_apv_072;
    gMessage73 = formJson.oLang.msg_apv_073;
    gMessage74 = formJson.oLang.msg_apv_074;
    gMessage75 = formJson.oLang.msg_apv_075;
    gMessage77 = formJson.oLang.msg_apv_077;
    gMessage100 = formJson.oLang.msg_apv_100;
    gMessage170 = formJson.oLang.msg_apv_170;
    gMessage173 = formJson.oLang.msg_apv_173;
    gMessage181 = formJson.oLang.msg_apv_181;
    gMessage197 = formJson.oLang.msg_apv_197;
    gMessage198 = formJson.oLang.msg_apv_198;
    gMessage199 = formJson.oLang.msg_apv_199;
    gMessage200 = formJson.oLang.msg_apv_200;
    gMessage201 = formJson.oLang.msg_apv_201;
    gMessage202 = formJson.oLang.msg_apv_202;
    gMessage203 = formJson.oLang.msg_apv_203;
    gMessage204 = formJson.oLang.msg_apv_204;
    gMessage254 = formJson.oLang.msg_apv_254;
    gMessage255 = formJson.oLang.msg_apv_255;
    gMessage256 = formJson.oLang.msg_apv_256;
    gMessage257 = formJson.oLang.msg_apv_257;
    gMessage264 = formJson.oLang.msg_apv_264;
    gMessage288 = formJson.oLang.msg_apv_288;
    gMessage289 = formJson.oLang.msg_apv_289;

    gMessage324 = formJson.oLang.msg_apv_324;

    /** formeditor.js 용 리소스 파일 변수 Start **/
    g_imgBasePath = "";
    gLabel_approval = formJson.oLang.lbl_apv_approval;
    gLabel_reject = formJson.oLang.lbl_apv_reject;
    gLabel_rejectedto = formJson.oLang.lbl_apv_rejectedto;	// [2015-11-26 add]
    gLabel_charge = formJson.oLang.lbl_apv_charge;
    gLabel_charge_person = formJson.oLang.lbl_apv_charge_person;
    gLabel_authorize = formJson.oLang.lbl_apv_authorize;
    gLabel_review = formJson.oLang.lbl_apv_review;
    gLabel_substitue = formJson.oLang.lbl_apv_substitue;
    gLabel_year = formJson.oLang.lbl_apv_year;
    gLabel_month = formJson.oLang.lbl_apv_month;
    gLabel_day = formJson.oLang.lbl_apv_day;
    gLabel_auditdept = formJson.oLang.btn_apv_auditdept;
    gLabel_comment = formJson.oLang.lbl_apv_comment;
    gLabel_viewopinion = formJson.oLang.lbl_apv_viewopinion;
    gLabel_bypass = formJson.oLang.lbl_apv_bypass;
    gLabel_face_to_face = formJson.oLang.lbl_face_to_face;
    gLabel_audit = formJson.oLang.lbl_apv_audit;
    gLabel_consent = formJson.oLang.lbl_apv_consent;
    gLabel_senddept = formJson.oLang.lbl_apv_send.toString() + formJson.oLang.lbl_apv_dept.toString();
    gLabel_reqdept = formJson.oLang.lbl_apv_reqdept;
    gLabel_receivedept = formJson.oLang.lbl_apv_receive.toString() + formJson.oLang.lbl_apv_dept.toString();
    gLabel_managedept = formJson.oLang.btn_apv_managedept;
    gLabel_recvedept = formJson.oLang.btn_apv_recvedept;		// [2015-02-05 add]
    gLabel_apv = formJson.oLang.lbl_apv_Approved;
    gLabel_gubun = formJson.oLang.lbl_apv_gubun;
    gLabel_state = formJson.oLang.lbl_apv_state;
    gLabel_username = formJson.oLang.lbl_apv_username;
    gLabel_jobtitle = formJson.oLang.lbl_apv_jobtitle;
    gLabel_approvdate = formJson.oLang.lbl_apv_approvdate;
    gLabel_oriapprover = formJson.oLang.lbl_apv_oriapprover;
    gLabel_comment = formJson.oLang.lbl_apv_comment;
    gLabel_disagree = formJson.oLang.lbl_apv_disagree;
    gLabel_agree = formJson.oLang.lbl_apv_agree;
    gLabel_reviewer = formJson.oLang.lbl_apv_reviewer;
    gLabel_dept = formJson.oLang.lbl_apv_dept;
    gLabel_jobposition = formJson.oLang.lbl_apv_jobposition;
    gLabel_reviewresult = formJson.oLang.lbl_apv_reviewresult;
    gLabel_reviewcomment = formJson.oLang.lbl_apv_comment;
    gLabel_writedept = formJson.oLang.lbl_apv_writedept;
    gLabel_approver = formJson.oLang.lbl_apv_approver;
    gLabel_Propdept = formJson.oLang.lbl_apv_Propdept;
    gLabel_Acceptdept = formJson.oLang.lbl_apv_Acceptdept;
    gLabel_assist = formJson.oLang.lbl_apv_assist;
    gLabel_send = formJson.oLang.lbl_apv_send;
    gLabel_receive = formJson.oLang.lbl_apv_receive;
    gLabel_approve = formJson.oLang.lbl_apv_normalapprove;
    gLabel_hold = formJson.oLang.lbl_apv_hold;
    gLabel_charge_apvline = formJson.oLang.lbl_apv_charge_apvline;
    gLabel_delete = formJson.oLang.lbl_apv_delete;
    gLabel_request = formJson.oLang.lbl_apv_request2;
    gLabel_management = formJson.oLang.lbl_apv_management;
    gLabel_file_delete = formJson.oLang.lbl_apv_file_delete;
    gLabel_investigation = formJson.oLang.lbl_apv_investigation;
    gLabel_Approved = formJson.oLang.lbl_apv_Approved;
    gLabel_year_1 = formJson.oLang.lbl_apv_year_1;
    gLabel_year_3 = formJson.oLang.lbl_apv_year_3;
    gLabel_year_5 = formJson.oLang.lbl_apv_year_5;
    gLabel_year_7 = formJson.oLang.lbl_apv_year_7;
    gLabel_year_10 = formJson.oLang.lbl_apv_year_10;
    gLabel_permanence = formJson.oLang.lbl_apv_permanence;
    gLabel_link_delete = formJson.oLang.lbl_apv_link_delete;
    gLabel_dept_audit = formJson.oLang.lbl_apv_dept_audit;
    gLabel_person_audit = formJson.oLang.lbl_apv_person_audit;
    gLabel_person_audit1 = formJson.oLang.lbl_apv_person_audit1
    gLabel_person_audit2 = formJson.oLang.lbl_apv_person_audit2
    gLabel_dept_audit2 = formJson.oLang.lbl_apv_dept_audit2;
    gLabel_ExtType = formJson.oLang.lbl_apv_ExtType;
    gLabel_ExtType1 = formJson.oLang.lbl_apv_ExtType_disagree;
    gLabel_ExtType2 = formJson.oLang.lbl_apv_ExtType_agree;
    gLabel_DeptConsent = formJson.oLang.lbl_apv_DeptConsent;
    gLabel_DeptAssist = formJson.oLang.lbl_apv_DeptAssist;
    gLabel_no = formJson.oLang.lbl_apv_no;
    gLabel_kind = formJson.oLang.lbl_apv_kind;
    gLabel_confirm = formJson.oLang.lbl_apv_Confirm;
    gLabel_reference = formJson.oLang.lbl_apv_share4list;
    gLabel_tit_consent = formJson.oLang.lbl_apv_tit_consent;
    gLabel_tit_approval2 = formJson.oLang.btn_apv_approval2;
    gLabel_Months = JSON.parse(formJson.oLang.lbl_apv_Months);
    gLabel_Days = JSON.parse(formJson.oLang.lbl_apv_Days);

    gLabel_AttachList = formJson.oLang.lbl_apv_AttachList;
    gLabel_opinion = formJson.oLang.lbl_apv_opinion2;
    gLabel_request_dept = formJson.oLang.lbl_request_dept;
    gLabel_Receiving_Dept = formJson.oLang.lbl_Receiving_Dept;
    gLabel_lbl_units = formJson.oLang.lbl_units;
    gLabel_lbl_added = formJson.oLang.lbl_added;
    gLabel_lbl_max = formJson.oLang.lbl_max;
    gLabel_lbl_limits = formJson.oLang.lbl_limits;
    msg_apv_form_reset = formJson.oLang.msg_apv_form_reset;
    /** formeditor.js 용 리소스 파일 변수 End **/
}

//Draft 양식을 위한 입력값 초기화 처리
function initFieldForDraft(obj) {
    
    var findFormat;
    findFormat = 'input[data-type="mField"],';
    findFormat += 'input[data-type="dField"],';
    findFormat += 'input[data-type="smField"],';
    findFormat += 'textarea[data-type="mField"],';
    findFormat += 'textarea[data-type="smField"]';

    obj.find(findFormat).not('[type="hidden"]').each(function () {
        //alert($(this).prop('outerHTML'));
        ////debugger;
        //var temp = $(this).prop('outerHTML');

        if ($(this).is("textarea")) {
            $(this).text('');
        }
        else {
            if ($(this).attr('value').indexOf('{{ doc.') > -1) {
                $(this).attr('value', '');
            }
        }

    });

    return obj;

}

function validateUnderscore(template) {

    var strRet, formDataString;

    strRet = template;
    formDataString = JSON.stringify(formJson);
    //ie8에서 양식필드id 한글로 명명했을때 오류처리
    formDataString = formDataString.replace(/\\u([a-z0-9]{4})/g, function ($0, $1) { return unescape('%u' + $1) });

    // 정규식 처리
    //var myString = "something format_abc";
    var myRegEx = /.*?{{ doc.(.*?) }}.*?/g;
    // Get an array containing the first capturing group for every match
    var matches = getMatches(strRet, myRegEx, 1);

    for (var i = 0; i < matches.length; i++) {

    	if (!checkKeyExistInJson(matches[i], formDataString)) {

			// 20171213 hpark 양식에서 같은 ID의 mField가 주석처리되어 있을경우 오류 수정
        	//strRet = strRet.replace('{{ doc.' + matches[i] + ' }}', '');
        	var tmp_RegExp = new RegExp('{{ doc.' + matches[i] + ' }}','g');
        	strRet = strRet.replace(tmp_RegExp, '');

        }
    }

    return strRet;
}

function checkKeyExistInJson(key, targetString) {

    var bRet = false;

    var keys = [];
    keys = key.split('.');

    var tKey = keys[keys.length - 1];

	// 20171213 hpark 다국어값이 mField의 ID와 같을 경우 오류 수정
    //var doublePattern = "\"" + tKey + "\"";
	//var singlePattern = "'" + tKey + "'";
    var doublePattern = "\"" + tKey + "\"" + ":";
    var singlePattern = "'" + tKey + "'" + ":";

    if (targetString.indexOf(doublePattern) > -1 || targetString.indexOf(singlePattern) > -1) {
        bRet = true;
    }

    return bRet;
}


function getMatches(string, regex, index) {
    index || (index = 1); // default to the first capturing group
    var matches = [];
    var match;
    while (match = regex.exec(string)) {
        matches.push(match[index]);
    }
    return matches;
}

function getDataForDynamicCtrl(target) {
    ////debugger;
    var xmlRet = '';
    //rField 처리
    $(target).find('*[data-type="rField"]').each(function (i, fld) {
        var dataElmType = $(fld).attr('data-element-type');
        if (typeof dataElmType != 'undefined') {
            var elmName = $(fld).attr('name');
            //sel_t 처리, text를 저장
            if (dataElmType == 'sel_t') {
                if (typeof elmName != 'undefined') {
                    xmlRet += "<" + elmName + ">" + $(fld).find('option:selected').text() + "</" + elmName + ">";
                }
            }//sel_v 처리, value를 저장
            else if (dataElmType == 'sel_v') {
                if (typeof elmName != 'undefined') {
                    xmlRet += "<" + elmName + ">" + $(fld).find('option:selected').val() + "</" + elmName + ">";
                }
            }
        }
        

    });

    return xmlRet;
}

//값의 배열 여부를 조사하여, 배열이 아닐 경우 배열로 리턴
function validateArray(obj) {
    var ret = [];

    if (!$.isArray(obj)) {
        ret.push(obj);
    }
    else {
        ret = obj;
    }

    return ret;
}

function postJobForDynamicCtrl() {
    //refactoring - 성능 고려
    //data-element-type 속성을 가진(rField와 stField는 공통 컴포넌트에서 처리)
    var $selectedElms = null;
    //if (getInfo("editmode") == "M") {
    //    $selectedElms = $('#editor').find('[data-element-type]').not('[data-type="rField"],[data-type="stField"],[data-element-mode="modify"]');
    //} else {

        $selectedElms = $('#editor').find('[data-element-type]').not('[data-type="rField"],[data-type="stField"]')
    //}
    var readMode = true;
    if ($selectedElms.length > 0) {
        $selectedElms.each(function (idx, elm) {
            var $elm = $(elm);
            var dataElmType = $elm.attr("data-element-type");
            var dataType = $elm.attr("data-type");
            var dataElementMode = $elm.attr("data-element-mode");
            if (getInfo("editmode") == "M" && dataElementMode == "modify")
                readMode = false;
            else
                readMode = true;
            
            //alert(dataElmType + ', ' + dataType);
            switch (dataElmType) {

                case "chk_d":
                    postChkJob($elm, dataElmType, dataType, readMode);
                    break;

                case "chk_v":
                    postChkJob($elm, dataElmType, dataType, readMode);
                    break;

                case "sel_d_v":
                    postSelJob($elm, dataElmType, dataType, readMode);
                    break;

                case "sel_d_t":
                    postSelJob($elm, dataElmType, dataType, readMode);
                    break;

                case "rdo_d":
                    postRdoJob($elm, dataElmType, dataType, readMode);
                    break;

                case "rdo_v":
                    postRdoJob($elm, dataElmType, dataType, readMode);
                    break;

                case "editor":
                    postEditorJob($elm);
                    break;

                case "textarea_linebreak":
                    postTextareaJob($elm, dataElmType, dataType, readMode);
                    break;

            }
        });
    }

	// 20171204 hpark m/r/dField 날짜포멧 변경
    $('#editor').find('[data-type="mField"],[data-type="dField"]').each(function (idx, item) {
    	if ($(item).hasClass("date-convert")) {
    		if ($(item).prop("tagName").toLowerCase() == "span")
    			$(item).text(formDateConvert($(item).text(), "L", $(item).attr("data-type")));
    		else
    			$(item).val(formDateConvert($(item).val(), "L", $(item).attr("data-type")));
    	}
    });

}

function postJobForReadMode(sModifyType) {
    var $selectedElms = null;
    $selectedElms = $('#editor').find('[data-element-mode="' + sModifyType + '"]')
    var readMode = true;
    if ($selectedElms.length > 0) {
        $selectedElms.each(function (idx, elm) {
            var $elm = $(elm);
            //var dataElmType = $elm.attr("data-element-type");
            //var dataType = $elm.attr("data-type");
            $elm.attr("disabled", true);
            //switch (dataElmType) {
            //    case "chk_d":
            //    case "chk_v":
            //        postChkJob($elm, dataElmType, dataType, readMode);
            //        break;
            //    case "sel_d_v":
            //    case "sel_d_t":
            //        postSelJob($elm, dataElmType, dataType, readMode);
            //        break;
            //    case "rdo_d":
            //    case "rdo_v":
            //        postRdoJob($elm, dataElmType, dataType, readMode);
            //        break;
            //    case "textarea_linebreak":
            //        postTextareaJob($elm, dataElmType, dataType, readMode);
            //        break;

            //}
            //if($elm.attr("type")=="text")
            //{
            //    postTextJob($elm, dataElmType, dataType, readMode);
            //} else if (elm.tagName == "IMG")
            //{
            //    postImgJob($elm, dataElmType, dataType, readMode);
            //}
        });
    }

}

function postImgJob(elm, dataElmType, dataType, readMode) {
    //읽기 모드 일 경우
    if (getInfo("templatemode") == "Read" && readMode) {
        try {
            elm.replaceWith("");
        }
        catch (e) { }
    }
    else {//임시 저장 처리

    }

}

function postTextJob(elm, dataElmType, dataType, readMode) {
    //읽기 모드 일 경우
    if (getInfo("templatemode") == "Read" && readMode) {
            try {
                var replaceHtml = "<span name='" + elm.attr("name") + "' value='" + elm.val() + "' style='" + elm.attr("style") + "'>";
                replaceHtml += elm.val();
                replaceHtml += "</span>";
                elm.replaceWith(replaceHtml);
            }
            catch (e) { }
    }
    else {//임시 저장 처리

    }

}

function postTextareaJob(elm, dataElmType, dataType, readMode) {
    var txtData;
    txtData = postDataJob(elm, dataElmType, dataType);

    //읽기 모드 일 경우
    if (getInfo("templatemode") == "Read" && readMode) {
        if (txtData != "" && typeof txtData != 'undefined') {
            try{
                //[2015-10-28 modi kh] modify textarea space format style s -----
            	txtData = XFN_ConvertXssView(txtData.replace(/ /g, '&nbsp;')); // 20171101 hpark XSS 관련 수정
                //$(elm).css('display', 'inline-block');
                $(elm).css('display', 'inline');
                //e -------------------------------------------------------------

                elm.html(txtData.replace(/\n/gi, "<br \/>"));
            }
            catch (e) { }
        }
    }
    else {//임시 저장 처리

    }

}

function postDataJob(elm, dataElmType, dataType) {
    var retData;

    //data 처리
    try {
        switch (dataType) {
            case "mField":
                if (typeof formJson.BODY_CONTEXT != 'undefined') {
                    // 체크박스의 경우
                    if (dataElmType.indexOf('chk') > -1) {
                        retData = validateArray(formJson.BODY_CONTEXT[getNodeName(elm)]);
                    }
                    else if (dataElmType.indexOf('sel_d_t') > -1) {
                        retData = {};
                        retData["VALUE"] = formJson.BODY_CONTEXT[getNodeName(elm)];
                        retData["TEXT"] = formJson.BODY_CONTEXT[getNodeName(elm) + '_TEXT'];
                    }
                    else if (dataElmType.indexOf('rdo_v') > -1) {
                        retData = {};
                        retData["VALUE"] = formJson.BODY_CONTEXT[getNodeName(elm)];
                        retData["TEXT"] = formJson.BODY_CONTEXT[getNodeName(elm) + '_TEXT'];
                    }
                    else {
                        retData = formJson.BODY_CONTEXT[getNodeName(elm)];
                    }
                }
                break;
            case "dField":
                if (typeof formJson.oFormData != 'undefined') {
                    // 체크박스의 경우
                    if (dataElmType.indexOf('chk') > -1) {
                        retData = validateArray(removeSeperatorForSingle(formJson.oFormData[getNodeName(elm)]));
                    }
                    else {
                        retData = formJson.oFormData[getNodeName(elm)];
                    }
                }
                break;
            case "smField":
                if (formJson.bodyinfo.bodydata != null) {
                    
                    // 체크박스의 경우
                    if (dataElmType.indexOf('chk') > -1) {
                        retData = validateArray(removeSeperatorForSingle(formJson.bodyinfo.bodydata.maintable[getNodeName(elm)]));
                    } else if (dataElmType.indexOf('sel_d_t') > -1) {			// [2015-01-28] smField select text
                        retData = {};
                        retData["VALUE"] = formJson.bodyinfo.bodydata.maintable[getNodeName(elm)];
                        retData["TEXT"] = elm.find("option[value='" + retData["VALUE"] + "']").text();
                    } else {
                        retData = formJson.bodyinfo.bodydata.maintable[getNodeName(elm)];
                    }
                }
                break;
            default:
                retData = "";
                break;
        }
    } catch (e) {
        alert("error at postDataJob : " + e.message);
    }

    return (retData == null) ? "" : retData;
}

function postEditorJob(elm) {
    //읽기 처리
    if (getInfo("templatemode") == "Read" && getInfo("fmpf") == "WF_FORM_EXTERNAL") {
        var replaceHtml = '';
        replaceHtml += '<table class="table_form_info_draft" summary="내용" cellpadding="0" cellspacing="0" style="width: 100%; margin: 11px 11px 11px 11px; table-layout: fixed; min-height: 350px; word-wrap:break-word;">';
        replaceHtml += '    <tr>';
        replaceHtml += '        <td width="100%" height="100%" id="{0}" valign="top" style="padding:13px;padding-right:27px"></td>';
        replaceHtml += '    </tr>';
        replaceHtml += '</table>';

        //replacewith
        elm.replaceWith(replaceHtml.f("tbContentElement"));
        //editor 내용 set
        setEditor();
    }
    else if (getInfo("templatemode") == "Read") { 
        var replaceHtml = '';
        replaceHtml += '<table class="table_form_info_draft" summary="내용" cellpadding="0" cellspacing="0" style="margin: 11px 11px 11px 11px; table-layout: fixed; min-height: 150px; width:100%; border:hidden; word-wrap:break-word;">';
        replaceHtml += '    <tr>';
        replaceHtml += '        <td width="100%" height="100%" id="{0}" valign="top" style="padding: 0px 22px 0px 0px;"></td>';// style="padding:13px;padding-right:27px" // hpark 에디터에서 우측정렬시 div밖으로 나오는 문제가 있어서 수정 - padding:0px >> padding: 0px 22px 0px 0px;
        replaceHtml += '    </tr>';
        replaceHtml += '</table>';

        //replacewith
        elm.replaceWith(replaceHtml.f("tbContentElement"));
        //editor 내용 set
        setEditor();
    }
}

function postRdoJob(elm, dataElmType, dataType, readMode) {

    var rdoData;
    rdoData = postDataJob(elm, dataElmType, dataType);

    //읽기 처리
    if (getInfo("templatemode") == "Read" && readMode) {

        if (dataElmType == "rdo_d") {
            // radio 처리, rdo_d
            elm.find('input:radio').each(function () {
                // input radio -> span
                //var replaceHtml = "<span>";
                var replaceHtml = "<span name='" + $(this).attr("name") + "' value='" + $(this).val() + "'>";
                if (rdoData != "" && typeof rdoData != 'undefined') {
                    if ($.inArray($(this).val(), rdoData) > -1 || rdoData == $(this).val()) {
                        replaceHtml += "●";
                    }
                    else {
                        replaceHtml += "○";
                    }
                }
                else {
                    replaceHtml += "○";
                }
                replaceHtml += "</span>&nbsp;";

                //replacewith
                $(this).replaceWith(replaceHtml);

            });

        }
        else if (dataElmType == "rdo_v") {
            // radio 처리, rdo_v
            var nodeName = getNodeName(elm);
            var replaceHtml = "<span name='" + nodeName + "'>";
            if (rdoData != "" && typeof rdoData != 'undefined') {
                var rdoDataText = "";
                if (rdoData.hasOwnProperty('TEXT')) {
                    // [2016-08-31 leesm] Safari 에서 rdoData.TEXT가 없음에도 object로 잡혀서 데이터 표시가 안됨
                    if (typeof rdoData.TEXT != 'undefined' && rdoData.TEXT != null && typeof rdoData.TEXT != 'object') {
                        rdoDataText = rdoData.TEXT;
                    }

                    // (2016-05-19 leesm) TEXT가 없을 경우 VALUE 데이터로 나오도록 수정함
                    if (rdoDataText == "") {
                        if (rdoData.hasOwnProperty('VALUE')) {
                            if (typeof rdoData.VALUE != 'undefined' && rdoData.VALUE != null) {
                                rdoDataText = rdoData.VALUE;
                            }
                            if ($.isArray(rdoData.VALUE)) {
                                rdoDataText = rdoData.VALUE[0];
                            }

                        }
                    }
                    replaceHtml += rdoDataText;
                }
                else {
                    replaceHtml += rdoData;
                }
            }
            replaceHtml += "</span>";
            elm.replaceWith(replaceHtml);
        }

    } else {
        //임시저장 처리
        // select 처리
        if (rdoData != "" && typeof rdoData != 'undefined') {
            var rdoValue;
            if (rdoData.hasOwnProperty('VALUE')) {
                rdoValue = rdoData.VALUE;
            }
            else {
                rdoValue = rdoData;
            }

            if (typeof rdoValue != 'undefined') {
                elm.find('input:radio').each(function () {
                    if (rdoValue != null) {
                        if ($.inArray($(this).val(), rdoValue) > -1 || rdoValue == $(this).val()) {
                            $(this).prop("checked", true);
                        }
                    }
                });
            }

        }

    }

}

function postSelJob(elm, dataElmType, dataType, readMode) {

    var selData = '';

    selData = postDataJob(elm, dataElmType, dataType);

    //읽기 처리
    if (getInfo("templatemode") == "Read" && readMode) {
        var nodeName = getNodeName(elm);
        if (dataElmType == "sel_d_v") {         //특수한 경우 처리, SAVE_TERM, DOC_LEVEL
            var replaceHtml = "<span id='" + nodeName + "'>";
            if (nodeName == "SAVETERM") {
                if (getInfo("DOC_LEVEL") == "00") {
                    //replaceHtml += setSaveTerm_READ("SaveDuration", getInfo("SAVE_TERM"));
                    //replaceHtml += getInfo("SAVE_TERM_TEXT");
                    replaceHtml += Common.GetDic("SaveDuration_" +getInfo("SAVE_TERM"));
                }
                else if (getInfo("DOC_LEVEL") == "0000001" || getInfo("DOC_LEVEL") == "0000003" || getInfo("DOC_LEVEL") == "0000007" || getInfo("DOC_LEVEL") == "0000000") {
                    //replaceHtml += setSaveTerm_READ("SaveDuration", getInfo("SAVE_TERM"));
                    //replaceHtml += getInfo("SAVE_TERM_TEXT");
                    replaceHtml += Common.GetDic("SaveDuration_" + getInfo("SAVE_TERM"));
                }
                else {
                    $("#TIT_SAVE_TERM").text(Common.GetDic("lbl_expire_date"));
                    replaceHtml += CFN_TransDateLocalFormat(getInfo("EXPIRE_DATE")); // 20171204 hpark m/r/dField 날짜포멧 변경
                }   
            }
            else if (nodeName == "DOCLEVEL") {
                try{
                    //replaceHtml += getInfo("DOC_LEVEL_TEXT");
                	//replaceHtml += Common.GetDic("DocSecurityGrade_" + getInfo("DOC_LEVEL"));
                	//if (Common.GetBaseCode("DocSecurityGrade").CacheData[0].DN_Code != "ORGROOT") {
                    //if (Common.GetDomainBaseCode("DocSecurityGrade", getInfo("ENT_CODE")).CacheData[0].DN_Code != "ORGROOT") {
                    if (_BaseCodeApv.DocSecurityGrade[0].DN_Code != "ORGROOT") {
                		replaceHtml += Common.GetDic("DocSecurityGrade_" + getInfo("ENT_CODE") + "_" + getInfo("DOC_LEVEL"));
                	}
                	else {
                		replaceHtml += Common.GetDic("DocSecurityGrade_" + getInfo("DOC_LEVEL"));
                	}
                } catch (e) {
                    //문서보안 , 보존년한 공통 부분이 어떻게 처리 될지 몰라 일단 try catch 걸어두었습니다. _최우석
                }

            }
            else {
                if (selData != "" && typeof selData != 'undefined' && selData != null) {
                    // (2016-06-17 leesm) 아래 조건문때문에 양식 값 매핑이 되지 않아서 주석함...
                    // if (selData != '0') {
                        replaceHtml += selData;
                    // }
                }
            }

            replaceHtml += "</span>&nbsp;";

            //replacewith
            elm.replaceWith(replaceHtml);
        }
        else if (dataElmType == "sel_d_t") {
            var replaceHtml = "";

            replaceHtml += "<span id='" + nodeName + "'>";

            if (selData != "" && typeof selData != 'undefined' && selData != null) {
                if (selData.hasOwnProperty('TEXT')) {
                    //if (selData.VALUE != '0') {
                		if (typeof selData.TEXT != 'undefined') {
							// 20171223 hpark 다국어 공통처리(_TEXT가 아니라 option 중 저장된 VALUE의 TEXT를 가져오도록)
                			//replaceHtml += selData.TEXT == null ? '' : selData.TEXT;
                			if (nodeName == "JobClas1") // 전산업무.. 양식 업무구분의 value값이 유일하지 않아서 구분불가, 다국어 예외처리 + value도 같이 보이도록 - 양식에서처리하고 여기서는 있는그대로 보여줌
                				replaceHtml += $("#" + nodeName).text();
							else
                				replaceHtml += $("#" + nodeName).find("option[value='" + selData.VALUE + "']").text() != "" ? $("#" + nodeName).find("option[value='" + selData.VALUE + "']").text() : selData.TEXT;
                        }
                        else {
                            replaceHtml += '';
                        }
                    //}
                }
                else {
                    // (2016-06-17 leesm) 아래 조건문때문에 양식 값 매핑이 되지 않아서 주석함...
                    // if (selData != '0') {
                        replaceHtml += selData;
                    // }
                }
            }
            replaceHtml += "</span>&nbsp;";

            elm.replaceWith(replaceHtml);
        }

    }
    else {      //임시저장 처리
        if (selData != null && selData != "" && typeof selData != 'undefined') {        // select 처리
            var selValue;
            var nodeName = getNodeName(elm);
            var entCode = "H101;K101;HK101;"

            if (selData.hasOwnProperty('VALUE')) {
                selValue = selData.VALUE;
            }
            else {
                selValue = selData;
            }

            if (typeof selValue != 'undefined') {
            	if (nodeName == "DOCLEVEL") {
            		elm.find('option[value="' + getInfo("DOC_LEVEL") + '"]').attr('selected', true);
            	} else {
            	    if (nodeName == "BIZ_CO_PLC" && entCode.indexOf(getInfo("ENT_CODE")) > -1) {
            	        if (elm.find('option[value="' + selValue + '"]').text() == selData.TEXT)
            	            elm.find('option[value="' + selValue + '"]').attr('selected', true);
            	    }
            	    else
            	        elm.find('option[value="' + selValue + '"]').attr('selected', true);
            	}
            }
            // 20171102 hpark 파기일자 관련 수정
            if (nodeName == "SAVETERM" || nodeName == "DOCLEVEL") {
                changeSAVETERM_STATE(document.getElementById("DOCLEVEL"));
            }
        }
    }
}

function postChkJob(elm, dataElmType, dataType, readMode) {

    var chkData;
    chkData = postDataJob(elm, dataElmType, dataType);

    //읽기 처리
    if (getInfo("templatemode") == "Read" && readMode) {

        if (dataElmType == "chk_d") {

            elm.find('input:checkbox').each(function () {
                // input checkbox -> span
                var replaceHtml = "<span name='" + $(this).attr("name") + "' value='" + $(this).val() + "'>";
                if (chkData != "" && typeof chkData != 'undefined') {

                    if ($.inArray($(this).val(), chkData) > -1) {
                        replaceHtml += "■";
                    }
                    else {
                        replaceHtml += "□";
                    }
                }
                else {
                    replaceHtml += "□";
                }

                replaceHtml += "</span>&nbsp;";

                //replacewith
                $(this).replaceWith(replaceHtml);
            });

        }
        else if (dataElmType == "chk_v") {
            var nodeName = getNodeName(elm);
            // input checkbox -> span
            var replaceHtml = "<span name='" + nodeName + "'>";

            if (chkData != "" && typeof chkData != 'undefined') {

                for (var i = 0; i < chkData.length; i++) {
                    replaceHtml += chkData[i];
                    if (i != (chkData.length - 1)) {
                        replaceHtml += ", ";
                    }
                }

            }
            replaceHtml += "</span>&nbsp;";

            //replacewith
            elm.replaceWith(replaceHtml);
        }

    } else {
        //임시저장 처리
        if (chkData != "" && typeof chkData != 'undefined') {
            elm.find('input:checkbox').each(function () {

                if ($.inArray($(this).val(), chkData) > -1) {
                    $(this).prop("checked", true);
                }

            });
        }
    }

}

function removeSeperatorForSingle(obj) {
    var ret;

    if (typeof obj != 'undefined' && obj != null) {
        if (obj.indexOf('|') > -1) {
            ret = obj.split('|');
        }
        else {
            ret = obj;
        }
    }
    
    return ret;
}

// json object의 값에 구분자를 포함한 경우 배열로 변환하는 함수
function removeSeperatorForMultiRow(jsonObj) {

    if (typeof jsonObj != 'undefined' && jsonObj != null) {
        //배열 형태이면 each를 두번
        if ($.isArray(jsonObj)) {
            $.each(jsonObj, function () {
            	var $row = this;
            	$.each(this, function (k, v) {
            		if (typeof v != 'undefined' && v != null) {
            			if (v.indexOf('|') > -1) {
            				var tempArr = v.split('|');
            				$row[k] = tempArr;
            			}
            		}
                });
            });
        }
        else {
            $.each(jsonObj, function (k, v) {
                //구분자 처리 가능한 값 '|'
                if (typeof v != 'undefined' && v != null) {
                    var $row = this;
                    if (v.indexOf('|') > -1) {
                        var tempArr = v.split('|');
                        $row[k] = tempArr;
                    }
                }
            });
        }
    }
    
    return jsonObj;
}

//특정 data 처리를 위한 함수
function commonDataChanger() {
    //console.log("commonDataChanger Start : " + new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds() + "." + new Date().getMilliseconds());
    // 재사용 시 data 처리
    if (getInfo("reuse") == "Y" || getInfo("reuse") == "C" || getInfo("reuse") == "P" || getInfo("reuse") == "INVEST") {
        if (getInfo("mode") != "DRAFT" && getInfo("mode") != "TEMPSAVE") {
            setInfo("fiid_file", getInfo("fiid"));
            setInfo("fiid", getInfo("fiid_reuse"));
            //setInfo("REPLY", "");
            setInfo("piid", getInfo("piid_spare"));
            setInfo("pidc", "");
            setInfo("mode", "DRAFT");
            setInfo("loct", "DRAFT");
            //document.getElementById("APVLIST").value = "";
            setInfo("DOC_NO", "");
            //setInfo("RECEIVE_NO", "");
            setInfo("INITIATOR_ID", getInfo("usid"));
            setInfo("INITIATOR_NAME", getInfo("usnm"));
            setInfo("INITIATOR_OU_ID", getInfo("dpid_apv"));
            setInfo("INITIATOR_OU_NAME", getInfo("dpnm_apv"));
            setInfo("wiid", ""); //201107 재사용으로 임시저장 시 결재선 저장을 위해 처리
            //의견부분 삭제 
            setInfo("commentlist", "<WF_COMMENT></WF_COMMENT>");
            //document.getElementById("APVLIST").value = getApvListReUse();
            //setInfo("apst", document.getElementById("APVLIST").value);

            //TO-DO : 결재선 재사용 관리 변경
            //결재선 재사용이고 기안자가 자기 자신인지 체크로직 추가
            //2017-06-21 BY YJYOO
            var xmlApvList = $.parseXML(getInfo("apst"));
            //var checkISInitiator = $(xmlApvList).find("division[divisiontype='send'] > step > ou > person[code='" + getInfo("usid") + "'] > taskinfo[kind='charge']").length;
            //var checkISInitiator = $(xmlApvList).find("division[divisiontype='send'] > step > ou > person > taskinfo[kind='charge']").length;
        	//if ((getInfo("reuse") == "Y" || getInfo("reuse") == "C") && checkISInitiator > 0) {
            if ((getInfo("reuse") == "Y" || getInfo("reuse") == "C" || getInfo("reuse") == "P")) {
                var reuseApv = getApvListReUse();
                setInfo("APVLIST", reuseApv);
                setInfo("apst", reuseApv);
            }
        }

    }
    //else if (getInfo("reuse") == "YH") { //회신옵션 추가 20150129
    //    var oldSubject = getInfo("SUBJECT");
    //    //formJson.BODY_CONTEXT.tbContentElement["#cdata-section"] = "<HTML><HEAD><META content='text/html; charset=utf-8' http-equiv='Content-Type'/><META name='GENERATOR' content='ActiveSquare'/></HEAD><BODY style='FONT-FAMILY: 바탕체; FONT-SIZE: 11pt'><P style='FONT-FAMILY: 바탕체; FONT-SIZE: 11pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[" + getInfo("SUBJECT") + "] 에 대한 회신의 건</P><P style='FONT-FAMILY: 바탕체; FONT-SIZE: 11pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</P><P style='FONT-FAMILY: 바탕체; FONT-SIZE: 11pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 귀 부서의 업무협조에 감사드립니다.</P><P style='FONT-FAMILY: 바탕체; FONT-SIZE: 11pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. [" + getInfo("DOC_NO") + "]에 대해 아래와 같이 회신 하오니 업무에 참고 바랍니다.</P><P style='FONT-FAMILY: 바탕체; FONT-SIZE: 11pt' align='center'>- 아&nbsp;&nbsp;&nbsp;&nbsp; 래 -</P></BODY></HTML>";
    //    formJson.BODY_CONTEXT.tbContentElement["#cdata-section"] = "<HTML><HEAD><META content='text/html; charset=utf-8' http-equiv='Content-Type'/><META name='GENERATOR' content='ActiveSquare'/></HEAD><BODY style='FONT-FAMILY: 바탕체; FONT-SIZE: 11pt'><P style='FONT-FAMILY: 바탕체; FONT-SIZE: 11pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 귀 부서의 업무협조에 감사드립니다.</P><P style='FONT-FAMILY: 바탕체; FONT-SIZE: 11pt'>&nbsp;&nbsp;&nbsp;&nbsp; 2. [" + getInfo("DOC_NO") + "]에 대해 아래와 같이 회신 하오니 업무에 참고 바랍니다.</P><P style='FONT-FAMILY: 바탕체; FONT-SIZE: 11pt' align='center'>- 아&nbsp;&nbsp;&nbsp;&nbsp; 래 -</P></BODY></HTML>";
    //    if (getInfo('readtype') != 'preview') { setInfo("SUBJECT", "[" + getInfo("SUBJECT") + "] 에 대한 회신의 건"); }

    //    //회신용 재기안지에 발신부서 정보를 수신부서에 넣기 
    //    var receiptList = getInfo("INITIATOR_OU_ID") + "|" + "X" + "@@";  //부서코드|N@@ 
    //    setInfo("RECEIPT_LIST", receiptList);

    //    var receiptListName = "0:" + getInfo("INITIATOR_OU_ID") + ":" + XFN_ReplaceAllChars(getInfo("INITIATOR_OU_NAME"), ";", "^") + ":X:";  //0:A90:감사팀^Auditing Team^^^^^^^^:X:
    //    setInfo("RECEIVE_NAMES", receiptListName);

    //    //        document.getElementsByName("RECEIPT_LIST")[0].value = receiptList;
    //    //        document.getElementsByName("RECEIVE_NAMES")[0].value = receiptListName;

    //    //수신처 다시 Display
    //    //$("input[name=recipient]").val(initRecList("R"));
    //    var vRecipient = receiptListName.split(":")[2].split("^")[0];  //수신처명
    //    $("input[name=recipient]").val(vRecipient);

    //    //BODY_CONTEXT에 특정필드값 재대입
    //    var oXML = $.parseXML(getInfo("BODY_CONTEXT"));
    //    $(oXML).find("recipient").text(vRecipient);  //수신처명

    //    var linkSubject = "";
    //    if (getInfo("mode") != "COMPLETE") {
    //        linkSubject = getInfo("PROCESS_ID") + "@@@" + getInfo("fmpf") + "@@@" + oldSubject + "@@@" + getInfo("DOC_NO");
    //    } else {
    //        linkSubject = getInfo("piid") + "@@@" + getInfo("fmpf") + "@@@" + oldSubject + "@@@" + getInfo("DOC_NO");
    //    }
    //    $(oXML).find("REJECTDOCLINKS").text(linkSubject.replace(/&quot;/gi, '"').replace(/&amp;/gi, '&').replace(/&lt;/gi, '<').replace(/&gt;/gi, '>'));  //원문서
    //    formJson.BODY_CONTEXT.REJECTDOCLINKS = linkSubject.replace(/&quot;/gi, '"').replace(/&amp;/gi, '&').replace(/&lt;/gi, '<').replace(/&gt;/gi, '>');
    //    setInfo("BODY_CONTEXT", CFN_XmlToString(oXML));

    //    setInfo("fiid", getInfo("fiid_spare")); setInfo("fiid_spare", getInfo("fiid"));
    //    setInfo("piid", getInfo("piid_spare")); setInfo("pidc", ""); setInfo("mode", "DRAFT"); setInfo("loct", "DRAFT");
    //    //        document.getElementById("APVLIST").value = "";
    //    setInfo("DOC_NO", ""); setInfo("RECEIVE_NO", ""); setInfo("INITIATOR_ID", getInfo("usid")); setInfo("INITIATOR_NAME", getInfo("usnm")); setInfo("INITIATOR_OU_ID", getInfo("dpid_apv")); setInfo("INITIATOR_OU_NAME", getInfo("dpnm_apv"));
    //    setInfo("wiid", ""); //201107 재사용으로 임시저장 시 결재선 저장을 위해 처리
    //    setInfo("pfsk", "");    //수신부서에 도착하고 완료되지 않은 문서에서도 회신버튼 동작하도록 하기 위하여 추가, 담당자만 지정시 pfsk가 T008이어서 mode가 REDRAFT로 변경되고 있었음
    //    setInfo("commentlist", "<WF_COMMENT></WF_COMMENT>");

    //    var reuseApv = '<steps initiatorcode="' + getInfo("usid") + '" initiatoroucode="' + getInfo("dpid_apv") + '" status="inactive"></steps>';
    //    setInfo("APVLIST", reuseApv);
    //    setInfo("apst", reuseApv);
    //    setDomainData(); //기본결재선 조회
    //    var BodyXml = $.parseXML(getInfo("BODY_CONTEXT"));
    //    $(BodyXml).find("INITIATOR_OU_DP").text(m_oFormMenu.getLngLabel(getInfo("dpdn"), false));
    //    $(BodyXml).find("INITIATOR_DP").text(m_oFormMenu.getLngLabel(getInfo("usdn"), false));

    //    setInfo("BODY_CONTEXT", CFN_XmlToString(BodyXml));
    //}

    // 히스토리 기능을 위한 데이터 변환
    if (gIsHistoryView == 'true') {
        //히스토리 버젼이 0인 경우는 최종 버젼
        if (gHistoryRev != '0') {
            var editedData;
            if (parent != null) {
                editedData = parent.sFormXml;
                if (editedData != '' || editedData != null) {
                    setHistoryData(editedData, gHistoryRev);
                }
            }

        }

    }
    //console.log("commonDataChanger End : " + new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds() + "." + new Date().getMilliseconds());
}

function setHistoryData(eData, eRev) {
    setInfo("mode", "COMPLETE");
    setInfo("loct", "COMPLETE");
    var xmlFormXML = $.parseXML(eData);
    var FormNodes = xmlFormXML.documentElement.childNodes;
    $(xmlFormXML).find("NewDataSet > Table").each(function (i, elm) {
        setInfo($(elm).find("FIELD_NAME").text(), $(elm).find("MODIFIED_VALUE").text());
    });

    //BODY_CONTEXT json object 처리
    if (typeof formJson.oFormData.BODY_CONTEXT == 'undefined') {
        var tempObj = {};
        tempObj["BODY_CONTEXT"] = $.xml2json(getInfo('BODY_CONTEXT'));
        if (typeof formJson.BODY_CONTEXT == 'undefined') {
            formJson = mergeJsonObj(formJson, tempObj);
        }
    }
    else {
        formJson.BODY_CONTEXT = $.xml2json(getInfo('BODY_CONTEXT'));
    }

    //bodyinfo json object 처리
    if (typeof formJson.oFormData.bodyinfo == 'undefined') {
        var tempObj = {};
        tempObj["bodyinfo"] = $.xml2json(getInfo('bodyinfo'));
        if (typeof formJson.bodyinfo == 'undefined') {
            formJson = mergeJsonObj(formJson, tempObj);
        }
    }
    else {
        formJson.bodyinfo = $.xml2json(getInfo('bodyinfo'));
    }

}

function setHistoryMenu() {
//히스토리 보기 시 메뉴영역 그리지 않는다.
//    document.getElementById("divMenu").style.display = "none";
//    document.getElementById("divMenu02").style.display = "none";
//    //document.getElementById("AppLine").style.display = "none";
//    document.getElementById("secrecy").style.display = "none";

    initForm();
    var m_oApvList = $.parseXML(getInfo("apst"));
    setInlineApvList(m_oApvList);
}

//읽기 / 쓰기 양식 통합처리를 위한 공통 변환 함수
function commonReplace() {
    var fld;
    var l_editor = "#editor";
    
    //select 처리
    $(l_editor).find('select[data-type="mField"], select[data-type="dField"]').each(function (i, fld) {

        var attrs = {};
        attrs["id"] = $(fld).attr('id');
        attrs["data-type"] = "tField";
        attrs["data-model"] = $(fld).attr('id');
        
        changeElementType($(fld), "span", attrs);
    });

    //input, textarea 처리

}

//Element type을 newType에 new attribute로 바꾸는 함수
function changeElementType(elm, newType, newAttrs, newInnerHtml) {
    elm.replaceWith(function () {
        return $("<" + newType + "/>", newAttrs).append($(this).contents()).html(newInnerHtml);
    });
}

// array null 체크
function checkNullForArray(arr) {
    var newArray = [];
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] != "" && arr[i] != null) {
            newArray.push(arr[i]);
        }
    }

    return newArray;
}

// jQuery string.format 처리
// 사용법 'this is {0}'.f('apple') => this is apple
String.prototype.format = String.prototype.f = function () {
    var s = this,
        i = arguments.length;

    while (i--) {
        s = s.replace(new RegExp('\\{' + i + '\\}', 'gm'), arguments[i]);
    }
    return s;
};

//Form Data 쪽 처리를 위해 추가한 함수
//json string 내의 parsing시 오류를 일으키는 문자 제거 -> 인코딩으로 주석
/*
function validateJsonStr(jsonStr) {
    return jsonStr
        .replace(/[\\]/g, '/')
        //.replace(/[\"]/g, '\\"')
        //.replace(/[\/]/g, '\\/')
        .replace(/[\b]/g, '')
        .replace(/[\f]/g, '')
        .replace(/[\n]/g, '')
        .replace(/[\r]/g, '')
        .replace(/[\t]/g, '');
}
*/

function decodeJsonObj(json) {
    var decodedObj = {};

    for (var key in json) {

        if (json[key] != null || json[key] != "") {

            var tempObj = {};
            var subJson = json[key];
            for (var subKey in subJson) {
                if (subJson[subKey] != null || subJson[subKey] != "") {
                    try {
                        tempObj[subKey] = Base64.decode(subJson[subKey]);
                    } catch (e) {
                        tempObj[subKey] = e.toString();
                    }
                }
            }

            decodedObj[key] = tempObj;
        }
    }

    return decodedObj;
}

//json object 병합
function mergeJsonObj(json1, json2) {
    var merged = {};
    for (var i in json1) {
        if (json1.hasOwnProperty(i))
            merged[i] = json1[i];
    }
    for (var i in json2) {
        if (json2.hasOwnProperty(i))
            merged[i] = json2[i];
    }

    return merged;
}

// Changes XML to JSON
function xmlToJson(xml) {

    var obj = {};
    if (xml.nodeType == 1) {
        if (xml.attributes.length > 0) {
            obj["@attributes"] = {};
            for (var j = 0; j < xml.attributes.length; j++) {
                var attribute = xml.attributes.item(j);
                obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
            }
        }
    } else if (xml.nodeType == 3) {
        obj = xml.nodeValue;
    }
    if (xml.hasChildNodes()) {
        for (var i = 0; i < xml.childNodes.length; i++) {
            var item = xml.childNodes.item(i);
            var nodeName = item.nodeName;
            if (typeof (obj[nodeName]) == "undefined") {
                obj[nodeName] = xmlToJson(item);
            } else {
                if (typeof (obj[nodeName].push) == "undefined") {
                    var old = obj[nodeName];
                    obj[nodeName] = [];
                    obj[nodeName].push(old);
                }
                obj[nodeName].push(xmlToJson(item));
            }
        }
    }
    return obj;
}

function xmlToJson2(xml) {
    // Create the return object
    var obj = {};

    if (xml.nodeType == 1) { // element
        // do attributes
        if (xml.attributes.length > 0) {
            obj["@attributes"] = {};
            for (var j = 0; j < xml.attributes.length; j++) {
                var attribute = xml.attributes.item(j);
                obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
            }
        }
    }
    else if (xml.nodeType == 4) { // cdata section
        obj = xml.nodeValue
    }

    // do children
    if (xml.hasChildNodes()) {
        for (var i = 0; i < xml.childNodes.length; i++) {
            var item = xml.childNodes.item(i);
            var nodeName = item.nodeName;
            if (typeof (obj[nodeName]) == "undefined") {
                if (nodeName != "#cdata-section") {
                    obj[nodeName] = xmlToJson2(item);
                }
                else {
                    obj = item.nodeValue
                }

            } else {
                if (typeof (obj[nodeName].length) == "undefined") {
                    var old = obj[nodeName];
                    obj[nodeName] = [];
                    obj[nodeName].push(old);
                }
                if (typeof (obj[nodeName]) === 'object') {
                    obj[nodeName].push(xmlToJson2(item));
                }
            }
        }
    }
    else {
        if (xml.nodeValue != null && xml.nodeValue != undefined && xml.nodeValue != "") {
            obj = xml.nodeValue;
        } else {
            obj = "";
        }
    }
    return obj;
};

//언어index 분기 처리
function returnLangUsingLangIdx(langIdx) {
    /*
    case "KO": szReturn = "0"; break;
    case "EN": szReturn = "1"; break;
    case "JA": szReturn = "2"; break;
    case "ZH": szReturn = "3"; break;
    
    */
    var retObj;

    switch (langIdx) {
        case 0:
            retObj = localLang_ko;
            break;
        case 1:
            retObj = localLang_en;
            break;
        case 2:
            retObj = localLang_ja;
            break;
        case 3:
            retObj = localLang_zh;
            break;
    }

    return retObj;
}

function LoadEditor(elm) {    
    //전자결재 양식이 Write 모드일때 BaseConfig의 에디터 로딩체크 기능 실행 여부 확인
    //Date : 2016-03-24
    //Author : YJYOO
    var sCheckApprovalEditorLoad = _BaseConfigApv.CheckApprovalEditorLoad;
    if (sCheckApprovalEditorLoad == null || sCheckApprovalEditorLoad.toUpperCase() == "" || sCheckApprovalEditorLoad.toUpperCase() == "N") {
        ////debugger;
        //0.TextArea, 1.DHtml, 2.TagFree, 3.XFree, 4.TagFree/XFree, 5.Activesquare, 6.CrossEditor, 7.ActivesquareDefault/CrossEditor
        //g_id = "tbContentElement";
        //gx_id = "tbContentElement";
        //g_editorTollBar = '0'; // 웹에디터 툴바 타입 설정 : 0-모든 툴바 표시 , 1-위쪽 툴바만 표시, 2-아래쪽 툴바만 표시
        //g_heigth = "400";

        //editor 영역
        switch (_BaseConfigApv.EditorType) {
            case "0":
                $('#' + elm).html('<textarea id=\"' + g_id + '\" name=\"' + g_id + '\" style="width: 98%; height: ' + g_heigth + 'px;"></textarea>');
                break;
            case "1":
                break;
            case "2":
                //eHtml += '<script src="/Common/ExControls/TagFree/tweditor.js" type="text/javascript"></script>';
                //eHtml += '<script language="javascript" for="' + g_id + '" event="OnControlInit">EditorSetContent();</script>';
                $('#' + elm).html(LoadtweditorForApproval())
                    .append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');
                break;
            case "3":
                //eHtml += '<script src="/Common/ExControls/XFree/XFreeEditor.js" type="text/javascript"></script>';
                $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                    .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/XFree.html" marginwidth="0" frameborder="0" scrolling="no" ></iframe>');

                //setTimeout("setEditor()", 1000);
                timerXFree = setInterval("setXFreeWhenAvailable()", 500);
                break;
            case "4":
                if (_ie) {
                    //eHtml += '<script src="/Common/ExControls/TagFree/tweditor.js" type="text/javascript"></script>';
                    //eHtml += '<script language="javascript" for="' + g_id + '" event="OnControlInit">EditorSetContent();</script>';

                    $('#' + elm).html(LoadtweditorForApproval())
                        .append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');
                }
                else {
                    //eHtml += '<script src="/Common/ExControls/XFree/XFreeEditor.js" type="text/javascript"></script>';
                    //iFrame 방식
                    $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                        .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/XFree.html" marginwidth="0" frameborder="0" scrolling="no" ></iframe>');

                    //기존 방식 -> 화면 초기화 문제점 발생
                    //LoadXFreeEditor();

                    //setTimeout("setEditor()", 1000);
                    //[2015-06-26 modi kh] XFree Design에 기본 양식 포맷 내용 안보이는 현상 수정 - interval 100 -> 500
                    timerXFree = setInterval("setXFreeWhenAvailable()", 500);
                }
                break;
            case "5":
                break;
            case "6":
                break;
            case "7":
                if (_ie) {
                    if (window.localStorage.getItem("EditorType") == "Active") {
                        try {
                            var Installx = new ActiveXObject("NamoWeCtl.2301100001.7.0"); //신세계 ProgID
                            if (Installx) Installed = true; else Installed = false;
                        }
                        catch (ex) { Installed = false; }
                        if (Installed) {
                            //$('#' + elm).html(LoadtweditorForApproval())
                            //.append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>')
                            //.append('<script src="/Common/ExControls/NamoActivesquare/NamoWec7_approval.js" type=\"text/javascript"></script><script language="javascript" for="' + g_id + '" event="OnInitCompleted">setTimeout("document.tbContentElement.SetDefaultFont(\'바탕체\');document.tbContentElement.SetDefaultFontSize(\'11\');",500);document.tbContentElement.BodyValue = \'\'; </script>');
                            $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                            .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/NamoWec7.html" marginwidth="0" frameborder="0" scrolling="no" width="100%" onLoad="setIFrameHeight(this)" ></iframe>')
                            .append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');
                        }
                        else {
                            $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                            .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/CrossEditor.html" marginwidth="0" frameborder="0" scrolling="no" ></iframe>');
                            timerXFree = setInterval("setXFreeWhenAvailable()", 1000);
                        }
                    }
                    else {
                        $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                        .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/CrossEditor.html" marginwidth="0" frameborder="0" scrolling="no" ></iframe>');
                        timerXFree = setInterval("setXFreeWhenAvailable()", 1000);
                    }
                }
                else {
                    $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                    .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/CrossEditor.html" marginwidth="0" frameborder="0" scrolling="no" ></iframe>');

                    timerXFree = setInterval("setXFreeWhenAvailable()", 1000);
                }
                break;
            case "8":
                // TODO: DEXT5 Test by 임동현 2015-07-30
                // DEXT5 Editor Loading                
                $('#' + elm)
                        .append('<script type="text/javascript" src="/Common/ExControls/dext5editor/js/dext5editor.js"></script> ')
                        // 에디터 영역 height 수정
                        //.append('<iframe id="dext5Frame" src="/Approval/Forms/Templates/common/Dext5.html" marginwidth="0" frameborder="0" scrolling="no" width="100%" height="400" ></iframe>')
                        .append('<iframe id="dext5Frame" src="/Approval/Forms/Templates/common/Dext5.html" marginwidth="0" frameborder="0" scrolling="no" width="100%" height="390" ></iframe>')
                        //.append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);function dext_editor_loaded_event(editor) {Common.AlertClose();}</script>');//width="730" height="600"
                        //.append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');//width="730" height="600"

                break;
            case "9":
                // TODO: DEXT5 Test by 임동현 2015-08-04
                // ChEditor Loading
                $('#' + elm)
                        .append('<script type="text/javascript" src="/Common/ExControls/Cheditor/cheditor.js"></script>')
                        .append('<iframe id="cheditorFrame" src="/Approval/Forms/Templates/common/Cheditor.html" marginwidth="0" frameborder="0" scrolling="no" width="100%" height="500" ></iframe>')
                        .append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');//width="730" height="600"
                break;
            default:
                break;
        }
    }
    else {
        ////debugger;
        //0.TextArea, 1.DHtml, 2.TagFree, 3.XFree, 4.TagFree/XFree, 5.Activesquare, 6.CrossEditor, 7.ActivesquareDefault/CrossEditor
        //g_id = "tbContentElement";
        //gx_id = "tbContentElement";
        //g_editorTollBar = '0'; // 웹에디터 툴바 타입 설정 : 0-모든 툴바 표시 , 1-위쪽 툴바만 표시, 2-아래쪽 툴바만 표시
        //g_heigth = "400";

        //editor 영역
        //switch (Common.GetBaseConfig('EditorType')) {
        switch (_BaseConfigApv.EditorType) {
        
            case "0":
                $('#' + elm).html('<textarea id=\"' + g_id + '\" name=\"' + g_id + '\" style="width: 98%; height: ' + g_heigth + 'px;"></textarea>');
                break;
            case "1":
                break;
            case "2":
                //eHtml += '<script src="/Common/ExControls/TagFree/tweditor.js" type="text/javascript"></script>';
                //eHtml += '<script language="javascript" for="' + g_id + '" event="OnControlInit">EditorSetContent();</script>';
                $('#' + elm).html(LoadtweditorForApproval())
                    .append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');
                break;
            case "3":
                //eHtml += '<script src="/Common/ExControls/XFree/XFreeEditor.js" type="text/javascript"></script>';
                $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                    .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/XFree.html" marginwidth="0" frameborder="0" scrolling="no" ></iframe>');

                //setTimeout("setEditor()", 1000);
                //timerXFree = setInterval("setXFreeWhenAvailable()", 500);
                break;
            case "4":
                if (_ie) {
                    //eHtml += '<script src="/Common/ExControls/TagFree/tweditor.js" type="text/javascript"></script>';
                    //eHtml += '<script language="javascript" for="' + g_id + '" event="OnControlInit">EditorSetContent();</script>';

                    $('#' + elm).html(LoadtweditorForApproval())
                        .append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');
                }
                else {
                    //eHtml += '<script src="/Common/ExControls/XFree/XFreeEditor.js" type="text/javascript"></script>';
                    //iFrame 방식
                    $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                        .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/XFree.html" marginwidth="0" frameborder="0" scrolling="no" ></iframe>');

                    //기존 방식 -> 화면 초기화 문제점 발생
                    //LoadXFreeEditor();

                    //setTimeout("setEditor()", 1000);
                    //[2015-06-26 modi kh] XFree Design에 기본 양식 포맷 내용 안보이는 현상 수정 - interval 100 -> 500
                    //timerXFree = setInterval("setXFreeWhenAvailable()", 500);
                }
                break;
            case "5":
                break;
            case "6":
                break;
            case "7":
                if (_ie) {
                    if (window.localStorage.getItem("EditorType") == "Active") {
                        try {
                            var Installx = new ActiveXObject("NamoWeCtl.2301100001.7.0"); //신세계 ProgID
                            if (Installx) Installed = true; else Installed = false;
                        }
                        catch (ex) { Installed = false; }
                        if (Installed) {
                            //$('#' + elm).html(LoadtweditorForApproval())
                            //.append('<script src="/Common/ExControls/NamoActivesquare/NamoWec7_approval.js" type=\"text/javascript"></script><script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');
                            $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                            .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/NamoWec7.html" marginwidth="0" frameborder="0" scrolling="no" width="100%" onLoad="setIFrameHeight(this)" ></iframe>')
                            .append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');
                        }
                        else {
                            $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                            .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/CrossEditor.html" marginwidth="0" frameborder="0" scrolling="no" ></iframe>');
                        }
                    }
                    else {
                        $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                        .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/CrossEditor.html" marginwidth="0" frameborder="0" scrolling="no" ></iframe>');
                    }
                }
                else {
                    $('#' + elm).append('<div id="hDivEditor" style="width: 100%; height:100%;"></div>')
                    .append('<iframe id="xFreeFrame" src="/Approval/Forms/Templates/common/CrossEditor.html" marginwidth="0" frameborder="0" scrolling="no" ></iframe>');
                }
                break;
            case "8":
                // TODO: DEXT5 Test by 임동현 2015-07-30
                // DEXT5 Editor Loading                
                $('#' + elm)
                        .append('<script type="text/javascript" src="/Common/ExControls/dext5editor/js/dext5editor.js"></script> ')
                        // 에디터 영역 height 수정
                        //.append('<iframe id="dext5Frame" src="/Approval/Forms/Templates/common/Dext5.html" marginwidth="0" frameborder="0" scrolling="no" width="100%" height="400" ></iframe>');
                        .append('<iframe id="dext5Frame" src="/Approval/Forms/Templates/common/Dext5.html" marginwidth="0" frameborder="0" scrolling="no" width="100%" height="390" ></iframe>');
                //.append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);function dext_editor_loaded_event(editor) {Common.AlertClose();}</script>');//width="730" height="600"
                //.append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');//width="730" height="600"

                break;
            case "9":
                // TODO: DEXT5 Test by 임동현 2015-08-04
                // ChEditor Loading
                $('#' + elm)
                        .append('<script type="text/javascript" src="/Common/ExControls/Cheditor/cheditor.js"></script>')
                        .append('<iframe id="cheditorFrame" src="/Approval/Forms/Templates/common/Cheditor.html" marginwidth="0" frameborder="0" scrolling="no" width="100%" height="500" ></iframe>')
                        .append('<script language="javascript" for="' + g_id + '" event="OnControlInit">setTimeout("setEditor()", 1000);</script>');//width="730" height="600"
                break;
            default:
                break;
        }
        //LoadEditor 호출 이후 Loading 창 발생
        if (_BaseConfigApv.EditorType == "7") {
            try {
                var Installx = new ActiveXObject("NamoWeCtl.2301100001.7.0"); //신세계 ProgID
                if (Installx) Installed = true; else Installed = false;
            }
            catch (ex) { Installed = false; }

            if (!_ie || window.localStorage.getItem("EditorType") != "Active" || !Installed) {
                Common.Indicator("Loading...", "editorStatusCheck()", 1000);
            }
        }
        else {
            if (_BaseConfigApv.EditorType == "2" || _BaseConfigApv.EditorType == "3" || _BaseConfigApv.EditorType == "4" || _BaseConfigApv.EditorType == "8") {
                Common.Indicator("Loading...", "editorStatusCheck()", 1000);
            }
        }
    }
}
function setIFrameHeight(obj) {
    if (obj.contentDocument) {
        obj.height = obj.contentDocument.body.offsetHeight;
    } else {
        obj.height = obj.contentWindow.document.body.scrollHeight;
    }
}
/*
* Editor 정상 로딩 여부 확인(TagFree / XFREE)
* Date : 2016-03-21
* Author : YJYOO
*/
function editorStatusCheck() {
    if (getInfo("editortype") == "2") {//2.TagFree
        if (document.tbContentElement == null || document.tbContentElement.ActiveTab == undefined || document.tbContentElement.ActiveTab < 0) {
            setTimeout("editorStatusCheck()", 500);
        }
        else {
            //Common.AlertClose();
            return true;
        }
    }
    else if (getInfo("editortype") == "3") {//3.XFree
        if (document.getElementById('xFreeFrame').contentWindow == undefined || document.getElementById('xFreeFrame').contentWindow.isLoaded == undefined || !document.getElementById('xFreeFrame').contentWindow.isLoaded) {
            setTimeout("editorStatusCheck()", 500);
        }
        else {
            setTimeout("setEditor()", 500);
            //Common.AlertClose();
            return true;
        }

    }
    else if (getInfo("editortype") == "4") {//4.TagFree/XFree
        if (_ie) {
            if (document.tbContentElement == null || document.tbContentElement.ActiveTab == undefined || document.tbContentElement.ActiveTab < 0) {
                setTimeout("editorStatusCheck()", 500);
            }
            else {
                //Common.AlertClose();
                return true;
            }
        }
        else {
            if (document.getElementById('xFreeFrame').contentWindow == undefined || document.getElementById('xFreeFrame').contentWindow.isLoaded == undefined || !document.getElementById('xFreeFrame').contentWindow.isLoaded) {
                setTimeout("editorStatusCheck()", 500);
            }
            else {
                setTimeout("setEditor()", 500);
                //Common.AlertClose();
                return true;
            }
        }
    }
    else if (getInfo("editortype") == "7") {//7.ActivesquareDefault/CrossEditor
        if (document.getElementById('xFreeFrame').contentWindow == undefined || document.getElementById('xFreeFrame').contentWindow.isLoaded == undefined || !document.getElementById('xFreeFrame').contentWindow.isLoaded) {
            setTimeout("editorStatusCheck()", 500);
        }
        else {
            setTimeout("setEditor()", 500);
            //Common.AlertClose();
            return true;
        }
    }
}

//XFree 에디터 data를 set하는 부분, try/catch 구문으로 에디터의 onload 시점을 판단
var timerXFree;
var timerXfreeCnt = 0;
function setXFreeWhenAvailable() {

    timerXfreeCnt++;

    try {
        // 기존의 var tempVal = document.getElementById('xFreeFrame').contentWindow.tbContentElement.getHtmlValue(); 부분을 주석처리함
        // Tagfree 사로 부터 Xfree 에디터가 로딩 완료되면 발생되는 onLoad 이벤트에서 할당받는 변수를 사용하도록 Guide함
        //var tempVal = document.getElementById('xFreeFrame').contentWindow.tbContentElement.getHtmlValue();
        if (document.getElementById('xFreeFrame').contentWindow.isLoaded){
            clearInterval(timerXFree);
            timerXfreeCnt = 0;
            setTimeout("setEditor()", 500);
        }
        else {
            if (timerXfreeCnt == 10) {
                clearInterval(timerXFree);
                timerXfreeCnt = 0;
            }
        }
    } catch (e) {
        if (timerXfreeCnt == 10) {
            clearInterval(timerXFree);
            timerXfreeCnt = 0;
        }
    }

}

//---------------------------- 이하 기존 함수-------------------------------------------------------



function event_false(oBtn) {
    return false;
}

//var visiblePopup_CallCount = 0;
////리사이징후 보이기
//function visiblePopup() {
    
//    //떠있는경우 return;
//    if (parent.$(".layer_divpop").css("visibility") == "visible") {
//        return;
//    }

//    if (parent.$(".bgiframe").contents().find(".l-popup__functions").position() == undefined) {

//        //{{ 1회만 리콜(타이머 시간이 짧아서 안 뜨는 경우가 있어 다시 10회 호출) - 빌드가 된경우, 속도가 무지하게 느린경우를 감안
//        if (visiblePopup_CallCount > 10) {
//            return;
//        }

//        setTimeout(function () { visiblePopup() }, 800);
//        visiblePopup_CallCount++;
//        return;
//        //}}
//    }

//    ///높이계산
//    parent.$(".divpop_contents").height(parent.$(".bgiframe").contents().find(".l-popup__functions").position().top + 120);
//    ////center 로 위치
//    parent.$(".divpop_contents").offset({ top: (screen.height - (parent.$(".divpop_contents").height() + 120)) / 2, left: (screen.width - parent.$(".divpop_contents").width()) / 2 });
//    //팝업 보이기
//    parent.$(".layer_divpop").css("visibility", "visible");

//    //parent.Common.AlertClose();
//}

function DocLink() {
    //visiblePopup_CallCount = 0;
    //parent.Common.Loading(Common.GetDic("lbl_Loding"));
    // var iWidth = 784; iHeight = 580 - 34; sSize = "fix";
    //var iWidth = 784; iHeight = 580 - 14; sSize = "fix";

    //[2015-12-08 modi kh] 연결문서 하단 버튼 안보임으로 인하여 팝업창 높이 조절
    //var iWidth = 784 + 10; iHeight = 580 + 18; sSize = "fix";
    //통합 로그 기록
    XFN_AccessLogWrite("102", LogType.Event, getInfo("piid"), getInfo("fmpf"), getInfo("fmnm"), "결재문서 첨부", "", BizCode.ApprovalForm, AccessTargetType.Page, AccessEventCodeType.Attribute);
    var iWidth = 960; iHeight = 700; sSize = "fix";

    var sUrl = "/Approval/DocList/DocListSelect.aspx";
    if (g_IS_TabUI == "Y") { sUrl = sUrl + "?IS_Tab=Y"; }
    if (openMode == "L" || openMode == "P" || openMode == "B") {
        var nLeft = (screen.width - iWidth) / 2;
        var nTop = (screen.height - iHeight) / 2;
        var sWidth = iWidth.toString() + "px";
        var sHeight = iHeight.toString() + "px";
        if (sUrl.indexOf('\?') > -1)
            parent.Common.ShowDialog("btDocLink", "DivPop_" + openID, $("#btDocLink").text(), sUrl + "&openID=" + openID, sWidth, sHeight, "iframe-ifNoScroll");    // 레이블 수정 필요.
        else
            parent.Common.ShowDialog("btDocLink", "DivPop_" + openID, $("#btDocLink").text(), sUrl + "?openID=" + openID, sWidth, sHeight, "iframe-ifNoScroll");    // 레이블 수정 필요.
    }

    //1초 후 리사이징 완료된 팝업 보이기
    //setTimeout(function () { visiblePopup() }, 800);
}

//프로세스 메뉴얼 연결 200801 by sunny
function ProcessLink() {
    //기본 연결 프로세스 메뉴얼이 있는 경우 자동 연결
    //2개 이상일 경우 하단의 프로세스 메뉴얼 활성화 및 link 제공
    //기본이 없는 경우 사용자 선택 창 open
    if (getInfo("scPMV") != "") {
        if (getInfo("scPMV").split("^").length > 1) {
            InputPMLinks(getInfo("scPMV"));
        } else {
            var aForm = getInfo("scPMV").split(";");
            var pmid = aForm[0];
            var pmnm = aForm[1];
            // var FormUrl = "http://" + document.location.host + "/CoviBPM/COVIBPMNet/BPD/Common/BPDefiner/ProcessPool/ProcessMapView.aspx";
            var FormUrl = document.location.protocol + "//" + document.location.host + "/CoviBPM/COVIBPMNet/BPD/Common/BPDefiner/ProcessPool/ProcessMapView.aspx";
            var strNewFearture = ModifyWindowFeature('width=800,height=600');
            window.open(FormUrl + "?ProcessID=" + pmid + "&Popup=true", '', strNewFearture);
            //window.open(FormUrl+"?ProcessID="+pmid+"&Popup=true",'','width=800,height=600');					
        }
    } else {
        var rgParams = null;
        rgParams = new Array();

        var szFont = "FONT-FAMILY: '굴림';font-size:9px;";
        var nWidth = 640;
        var nHeight = 540;
        var szURL = "/CoviBPM/COVIBPMNet/BPD/Admin/BPDefiner/Organization/OrganizationAuthority.aspx?System=APPROVAL";
        var szParam = "";
        if (PMLINKS.value != "") {
            var array = PMLINKS.value.split("^");
            for (var i = 0; i < array.length ; i++) {
                if (szParam != "") {
                    szParam += "^";
                }
                szParam += array[i].split(";")[0];
            }
            if (szParam != "") szURL = szURL + "&Check=" + szParam;
        }
        var vRetval = window.showModalDialog(szURL, rgParams, szFont + "dialogHeight:" + nHeight + "px;dialogWidth:" + nWidth + "px;status:no;resizable:yes;help:no;");
        if (vRetval != null) {
            PMLINKS.value = vRetval;
            InputPMLinks();
        }
    }
}
//미니창
var formHTML = "";
var formdisplay = "none";
var szformwidth, szformheight;
function Minimize() {
    var szwidth, szheight;
    try {
        document.getElementById("formname").innerHTML = getInfo("fmnm");
        if (document.getElementById("SUBJECT").value != "") {
            document.getElementById("formsubject").innerHTML = document.getElementById("SUBJECT").value;
        }
    } catch (e) { }

    if ($("#divMenu") != null && document.getElementById("divMenu").style.display == "") {
        document.getElementById("bodytable").style.display = "none";
        formHTML = document.getElementById("divforminfo").innerHTML;
        formdisplay = document.getElementById("divforminfo").style.display;
        szwidth = 360; szheight = 200;
        document.getElementById("divforminfo").innerHTML = document.getElementById("divminiform").innerHTML;
        document.getElementById("divforminfo").style.display = "";

        //강성채 추가 ..임시메모기능때문에
        document.getElementById("divTempMemo").style.display = "none";
        if (m_bTabForm) {
        } else {
            parent.document.getElementById("main").setAttribute("rows", "58,*,0");
        }
    } else {
        document.getElementById("bodytable").style.display = "";
        document.getElementById("divforminfo").innerHTML = formHTML;
        document.getElementById("divforminfo").style.display = formdisplay;
        if (m_bTabForm) {
            szwidth = "1024"; szheight = "740";
        } else {
            szwidth = "812"; szheight = "740";
        }
    }
    if (m_bTabForm) {
        top.resizeTo(szwidth, szheight);
    } else {
        if (window.parent.parent.location.href == window.parent.location.href) {
            window.parent.resizeTo(szwidth, szheight);
        }
        else {
            window.parent.parent.resizeTo(szwidth, szheight);
        }
    }
    document.getElementById("divMenu").style.display = (document.getElementById("divMenu").style.display == "") ? "none" : "";
    document.getElementById("divminimenu").style.display = (document.getElementById("divminimenu").style.display == "") ? "none" : "";
}

//구문 정리 : KJW : 2014.04.24 : XFORM PRJ.
function tempMemo() {
    $('#divTempMemo').toggle();
}

//주석 정리 : KJW : 2014.04.24 : XFORM PRJ.
//임시메모 divTempMemp의 focus() 이벤트에 연결
function dragApp() {
    document.oncontextmenu = function () { return true; }
    document.onselectstart = function () { return true; }
    document.ondragstart = function () { return true; }
}

function FormatStringToNumber(sValue) {
    return parseInt(sValue);
}

//아래 함수 정리 필요 formmenu.js 2018줄에서 사용
function gotoFolder(strFolderURL, strFolderName) {
    /*
    try {
        if (strFolderName != undefined) {
            strFolderURL += "&location_name=" + escape(strFolderName);
        }

        if (opener.name == "rightFrame") {
            opener.location.href = strFolderURL;
        } else if (opener.parent.name == "rightFrame") {  // 프레임안에 하나 더 감싸여 있을 경우
            opener.parent.location.href = strFolderURL;
        }
    } catch (e) {  }
    */
}

function cTagreSize() {
    var obj_r = document.getElementById('pTag');
    var obj_c = document.getElementById('cTag');
    var obj_l = document.getElementById('lTag');
    var obj_lf = document.getElementById('lTag_f');
    var obj_aside = document.getElementById('divAside');
    var cHeight = $('.con_in').height() + 50;
    var oPHeight = 0;
    if (eval(obj_l) && obj_l.offsetHeight > cHeight) {
        if (eval(obj_r)) {
            if (obj_l.offsetHeight > obj_r.offsetHeight) {
                oPHeight = obj_l.offsetHeight;
            } else {
                oPHeight = obj_r.offsetHeight;
            }
        } else {
            oPHeight = obj_l.offsetHeight;
        }
    } else if (eval(obj_r) && eval(obj_c)) {
        if (cHeight > obj_r.offsetHeight) {
            oPHeight = cHeight;
        } else {
            oPHeight = obj_r.offsetHeight;
        }
    } else if (eval(obj_c)) {
        oPHeight = cHeight;
    }

    if (eval(obj_aside)) {
        if (obj_aside.offsetHeight > oPHeight) {
            oPHeight = obj_aside.offsetHeight;
        }
    }

    if (eval(obj_l)) { obj_l.style.height = oPHeight + "px"; }
    if (eval(obj_lf)) { obj_lf.style.height = oPHeight + "px"; }
    if (eval(obj_c)) { obj_c.style.height = oPHeight + "px"; }
    if (eval(obj_r)) { obj_r.style.height = oPHeight + "px"; }
}

//회람현황 입력
function settingTCINFO() {
    var strflag = false;
    var sItems = "<request>";
    var sUrl;
    sUrl = "/Approval/Circulation/Circulation_Read_Update.aspx";

    sItems += makeNode("fiid", getInfo("fiid"))
            + makeNode("sendid", "")
            + makeNode("type", getInfo("gloct"))
            + makeNode("receipt_id", getInfo("usid"))
            + makeNode("receipt_name", getInfo("usdn"))
            + makeNode("receipt_ou_id", getInfo("dpid"))
            + makeNode("receipt_ou_name", getInfo("dpdn"))
            + makeNode("receipt_state", "")
            + makeNode("receipt_date", "")
            + makeNode("read_date", "")
            + makeNode("piid", getInfo("piid"))
            + makeNode("sender_id", getInfo("INITIATOR_ID"))
            + makeNode("sender_name", getInfo("INITIATOR_NAME"))
            + makeNode("sender_ou_id", getInfo("INITIATOR_OU_ID"))
            + makeNode("sender_ou_name", getInfo("INITIATOR_OU_NAME"), null, true)
            + makeNode("fmnm", getInfo("fmnm"), null, true)
            + makeNode("subject", getInfo("SUBJECT"))
            + makeNode("link_url", getInfo("pidc"), null, true)
            + makeNode("send_date", getInfo("INITIATED_DATE"))
    ;
    sItems += "</request>";
    //alert(sUrl);
    CFN_CallAjax(sUrl, sItems, function (data) {
        if (typeof (opener.SetTimeoutAPVCNT) == 'function' || typeof (opener.SetTimeoutAPVCNT) == 'object') {
            setTimeout(function () {
                opener.SetTimeoutAPVCNT();
            }, 1000);
        }
    }, true, "xml");
}

//로딩이미지 토글하기
function ToggleLoadingImage() {
    if ($('#divLoading').is(':hidden')) {
        var nLeft = 0;
        var nTop = 0;

        if (g_IS_TabUI == "Y") {
            var currentTabID = parent.document.getElementById("hidMasterCurrentTab").value;
            var currentIframe = parent.document.getElementById("ifrTabContent_" + currentTabID).contentWindow;
            nLeft = (currentIframe.window.innerWidth) / 2 - 120; //현재프레임 넓이의 메세지창 절반을 뺀 만큼
            nTop = (currentIframe.window.innerHeight) / 2 - 70; //현재프레임 높이의 메뉴 높이와 메세지창 절반을 뺀 만큼
        }
        else {
            nLeft = (document.body.offsetWidth) / 2 - 120; //body 넓이의 메세지창 절반을 뺀 만큼
            nTop = (window.innerHeight) / 2 - 70; //body 넓이의 메뉴 높이와 메세지창 절반을 뺀 만큼
        }
        
        $('#divLoading').css("top", nTop + "px");
        $('#divLoading').css("left", nLeft + "px");
        $('#divLoading').show();
        $('#loading_overlay').show();
    }
    else {
        $('#divLoading').hide();
        $('#loading_overlay').hide();
    }
}

//모바일 메뉴 처리
function initOnloadformmenu_ext() {
    if (getInfo("usid") != null) {
        initOnloadformmenu2();
        initOnloadformedit();

        //첨부파일UX통일-첨부파일 컨트롤 및 기본 값 채우기
        if (getInfo("templatemode") == "Write") {
            attFile2();     // ATTACH_FILE_INFO 에서 hidOldFile 정보 가져오기.
            FileOnLoad();   // 기존 첨부파일 정보 바인드(CoviFileTrans 와 Basic Upload)
        }
    }
    //document.getElementById("AppLine").style.display = "none";

}

function initOnloadformmenu2() {
    if (getInfo("mode") == "DRAFT" || getInfo("mode") == "TEMPSAVE") {
        document.getElementById("btDraft").style.display = "";
        if (getInfo("scIPub") == "1") {
        	if (getInfo("scInformationAppV") != "000" || getInfo("scInformationApp_ref_person") != "0" || getInfo("scInformationApp_coop_only") != "0") { // 20200427 hpark 참조자 추가 // 협조처만 사용 20200608 hpark 자동결재라인,결재선병합,결재/협조/참조/고정/숨김 작업
                document.getElementById("btLine").style.display = "";
            }
        }
    } else {
        //document.getElementById("btPrint").style.display = "";
        //document.getElementById("btPrintView").style.display = "";
    }

    if (getInfo("loct") == "DRAFT" || getInfo("loct") == "TEMPSAVE") {
        if (getInfo("scCAt4") == "0") {
        	if (getInfo("Form_AttchDocuments") == "Y") {
                document.getElementById("btDocLinked").style.display = "";
                document.getElementById("btDocLink").style.display = "";
            }           
        }
        if (getInfo("scCAt3") == "0" && gIsSAP != "Y") {  //기록물철 사용인 경우 
            try {
                document.getElementById("btSelRecDoc").style.display = "";
            } catch (e) { }
        }
    }

    if (getInfo("mode") == "REDRAFT") {
        if (getInfo("usisdocmanager") == "true") {
            document.getElementById("btCharge").style.display = "";
        }
    }

    if (getInfo("loct") == "COMPLETE") {
        //document.getElementById("btPcSave").style.display = "";
    }

    if (getInfo("mode") == "REDRAFT" || getInfo("mode") == "SUBREDRAFT") {
        if (getInfo("pfsk") == "T008") { //담당자 재기안일 경우 결재버튼 활성화
            if (document.getElementById("btApproved") != null && document.getElementById("btApproved") != undefined)
            document.getElementById("btApproved").style.display = "";
        }
    }

    m_oFormEditor = window.document;//parent.editor
    m_oFormReader = window.document;//parent.redear

    if (admintype != "ADMIN" && getInfo("loct") == "APPROVAL" && (getInfo("mode") == "APPROVAL" || getInfo("mode") == "PCONSULT" || getInfo("mode") == "RECAPPROVAL"))
    {
        setApvList();
    }
    else if (getInfo("mode") == "REDRAFT" || getInfo("mode") == "PCONSULT" || getInfo("mode") == "APPROVAL" || getInfo("mode") == "RECAPPROVAL") {
        setApvList();
    }
    else {
        document.getElementById("APVLIST").value = getInfo("apst");
    }

    //[2016-01][Hybrid] - 모바일 앱으로 접속시에만 닫기 버튼 활성화
    try {
        if (navigator.userAgent.toString().indexOf("COVI_HYBRID", 0) > -1) {
            if (_android) {
                document.getElementById("btExit").style.display = "";
            }
            else if (_ipad || _iphone) {
                document.getElementById("btExit").style.display = "";
            }
        }
    }
    catch (e) {
    }
    //[Hybrid]
}

function initOnloadformmenu_notelist() {
    if (getInfo("mode") == "DRAFT" || getInfo("mode") == "TEMPSAVE") {
        document.getElementById("btDocListSave").style.display = "";
    }

    if (getInfo("loct") == "DRAFT" || getInfo("loct") == "TEMPSAVE") {
        if (getInfo("scCAt4") == "0") {
        	if (getInfo("Form_AttchDocuments") == "Y") {
                document.getElementById("btDocLinked").style.display = "";
                document.getElementById("btDocLink").style.display = "";
            }
        }
    }

    if (getInfo("loct") == "COMPLETE") {
        document.getElementById("btOTrans").style.display = "";
    }

    m_oFormEditor = window.document;//parent.editor
    m_oFormReader = window.document;//parent.redear

    if (admintype != "ADMIN" && getInfo("loct") == "APPROVAL" && (getInfo("mode") == "APPROVAL" || getInfo("mode") == "PCONSULT" || getInfo("mode") == "RECAPPROVAL"))
    { setApvList(); }
    else { document.getElementById("APVLIST").value = getInfo("apst"); }
}


//************************************* 협조처정보 생성 [S]
function GetConsultDeptInfo(compCode, deptCode) {
    var szURL = Common.GetBaseConfig('WebServicePath') + "/ClientWebService.asmx";
    var Param = String.format("{ COMPCODE:'{0}', DEPTCODE:'{1}' }", compCode, deptCode);
    var result = "";
    CFN_CallAjaxJson(szURL + "/SelectConsultDeptInfo", Param, false, function (data) {
        var oResult = $.parseJSON(data);
        var xmlReturn = $.parseXML(oResult.d);
        var errorNode = $(xmlReturn).find("error");
        if (errorNode.length > 0) {
            Common.Error("Desc: " + $(errorNode).text());
        } else {
            var elmlist = $(xmlReturn).find("Table");

            $(elmlist).each(function () {

                result = String.format("{0}:{1}:T:{2}::{3}:N:{4};:{5}:{6}"
                    , $(this).find("FARMCODE").text()
                    , $(this).find("DN_CODE").text()
                    , $(this).find("DEPTCODE").text()
                    , $(this).find("ORGGRADECODE").text()
                    , $(this).find("EXDISPLAYNAME_GR").text()
                    , $(this).find("EXDISPLAYNAME_DN").text()
                    , $(this).find("EXDISPLAYNAME_ORGGRADE").text()
                    );

                //result = String.format("{0}:T:{1}::{2}:N:{3};:{4}:{5}:{6}"
                //    , $(this).find("DN_CODE").text()
                //    , $(this).find("DEPTCODE").text()
                //    , $(this).find("ORGGRADECODE").text()
                //    , $(this).find("EXDISPLAYNAME_GR").text()
                //    , $(this).find("EXDISPLAYNAME_DN").text()
                //    , $(this).find("EXDISPLAYNAME_ORGGRADE").text()
                //    , $(this).find("FARMCODE").text()
                //    );
            });
        }
    }, false, "xml");
    return result;
}
//************************************* 협조처정보 생성 [E]


// 양식로드완료 이벤트 
function fn_form_loaded_event() {

}

// 에디터 로드완료시 함수 호출
var m_iWF_HDEC_EXT_LETTER_dext_no = 0;
function fn_dext_loaded_event(editor) {

    if (getInfo("fmpf") == "WF_HDEC_EXT_LETTER") {
        m_iWF_HDEC_EXT_LETTER_dext_no++;
        WF_HDEC_EXT_LETTER_dext_loaded(m_iWF_HDEC_EXT_LETTER_dext_no);
    }

}

// 첨부파일 로드완료시 함수호출 호출
function fn_filectrl_loaded_event() {

	// 20200617 hpark 에디터가 없는양식 복사시 임시저장처리
	// 기존에 에디터 로드완료시 이벤트에 있어서, 에디터가 없는양식은 임시저장 처리가 안되고 있었음
	if (getInfo("templatemode") == "Write" && $("#divWebEditorContainer").length == 0) setTimeout('setInitFormFocus2()', 500);

}